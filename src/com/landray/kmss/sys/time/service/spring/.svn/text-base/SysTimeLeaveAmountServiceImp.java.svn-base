package com.landray.kmss.sys.time.service.spring;import com.alibaba.fastjson.JSONObject;import com.google.common.collect.Lists;import com.google.common.collect.Maps;import com.landray.kmss.common.actions.RequestContext;import com.landray.kmss.common.dao.HQLInfo;import com.landray.kmss.common.dao.IBaseDao;import com.landray.kmss.common.exception.UnexpectedRequestException;import com.landray.kmss.common.model.IBaseModel;import com.landray.kmss.common.service.BaseServiceImp;import com.landray.kmss.constant.SysAuthConstant;import com.landray.kmss.constant.SysOrgConstant;import com.landray.kmss.framework.util.PluginConfigLocationsUtil;import com.landray.kmss.hr.staff.model.HrStaffPersonInfo;import com.landray.kmss.sys.organization.interfaces.ISysOrgCoreService;import com.landray.kmss.sys.organization.model.SysOrgPerson;import com.landray.kmss.sys.time.forms.SysTimeImportForm;import com.landray.kmss.sys.time.model.SysTimeLeaveAmount;import com.landray.kmss.sys.time.model.SysTimeLeaveAmountItem;import com.landray.kmss.sys.time.model.SysTimeLeaveRule;import com.landray.kmss.sys.time.model.SysTimeLeaveRuleList;import com.landray.kmss.sys.time.service.ISysTimeImportService;import com.landray.kmss.sys.time.service.ISysTimeLeaveAmountItemService;import com.landray.kmss.sys.time.service.ISysTimeLeaveAmountService;import com.landray.kmss.sys.time.service.ISysTimeLeaveRuleService;import com.landray.kmss.sys.time.util.SysTimeImportUtil;import com.landray.kmss.sys.time.util.SysTimeUtil;import com.landray.kmss.util.DateUtil;import com.landray.kmss.util.*;import com.sunbor.web.tag.Page;import org.apache.commons.collections.CollectionUtils;import org.apache.commons.io.IOUtils;import org.apache.poi.hssf.usermodel.*;import org.apache.poi.ss.usermodel.*;import org.hibernate.query.NativeQuery;import org.slf4j.Logger;import org.springframework.transaction.TransactionStatus;import java.io.File;import java.io.InputStream;import java.math.BigDecimal;import java.math.BigInteger;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.*;/** * * @author cuiwj * @version 1.0 2018-12-12 */public class SysTimeLeaveAmountServiceImp extends BaseServiceImp		implements ISysTimeLeaveAmountService, ISysTimeImportService {	/**	 * 日期格式化	 */	private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");	private static final Logger logger = org.slf4j.LoggerFactory.getLogger(SysTimeLeaveAmountServiceImp.class);	private ISysTimeLeaveRuleService sysTimeLeaveRuleService;	public void setSysTimeLeaveRuleService(			ISysTimeLeaveRuleService sysTimeLeaveRuleService) {		this.sysTimeLeaveRuleService = sysTimeLeaveRuleService;	}	private ISysTimeLeaveAmountItemService sysTimeLeaveAmountItemService;	public void setSysTimeLeaveAmountItemService(			ISysTimeLeaveAmountItemService sysTimeLeaveAmountItemService) {		this.sysTimeLeaveAmountItemService = sysTimeLeaveAmountItemService;	}	private ISysOrgCoreService sysOrgCoreService;	public void setSysOrgCoreService(ISysOrgCoreService sysOrgCoreService) {		this.sysOrgCoreService = sysOrgCoreService;	}	@Override	public String add(IBaseModel modelObj) throws Exception {		SysTimeLeaveAmount amount = (SysTimeLeaveAmount) modelObj;		amount.setDocCreateTime(new Date());		amount.setDocCreator(UserUtil.getUser());		// 更新下一年的数据		SysTimeLeaveAmount nextAmount = getLeaveAmount(amount.getFdYear() + 1,				amount.getFdPerson().getFdId());		if (nextAmount != null) {			List<SysTimeLeaveAmountItem> amountItems = amount					.getFdAmountItems();			List<SysTimeLeaveAmountItem> nextAmountItems = nextAmount					.getFdAmountItems();			if (amountItems != null && nextAmountItems !=null && !nextAmountItems.isEmpty() && !amountItems.isEmpty()) {				for (SysTimeLeaveAmountItem item : amountItems) {					SysTimeLeaveAmountItem nextItem = getLeaveAmountItem(							nextAmountItems, item.getFdLeaveType());					if (nextItem != null) {						Float fdRestDay = item.getFdRestDay() == null ? 0f								: item.getFdRestDay();						nextItem.setFdLastTotalDay(fdRestDay);						nextItem.setFdLastRestDay(fdRestDay);						nextItem.setFdLastUsedDay(0f);						nextItem.setFdLastValidDate(item.getFdValidDate());						nextItem.setFdIsLastAvail(								Boolean.TRUE.equals(item.getFdIsAvail()));						sysTimeLeaveAmountItemService.getBaseDao()								.update(nextItem);					}				}			}		}		return super.add(amount);	}	@Override	public void update(IBaseModel modelObj) throws Exception {		SysTimeLeaveAmount amount = (SysTimeLeaveAmount) modelObj;		amount.setDocAlterTime(new Date());		amount.setDocAlteror(UserUtil.getUser());		// 更新下一年的数据		SysTimeLeaveAmount nextAmount = getLeaveAmount(amount.getFdYear() + 1,				amount.getFdPerson().getFdId());		if (nextAmount != null) {			List<SysTimeLeaveAmountItem> amountItems = amount					.getFdAmountItems();			List<SysTimeLeaveAmountItem> nextAmountItems = nextAmount					.getFdAmountItems();			if (amountItems != null && nextAmountItems !=null && !nextAmountItems.isEmpty() && !amountItems.isEmpty()) {				for (SysTimeLeaveAmountItem item : amountItems) {					SysTimeLeaveAmountItem nextItem = getLeaveAmountItem(							nextAmountItems, item.getFdLeaveType());					if (nextItem != null) {						Float usedDay = nextItem.getFdLastUsedDay();						// 下一年已使用这一年的假期						usedDay = usedDay != null && usedDay > 0 ? usedDay : 0f;						Float fdRestDay = item.getFdRestDay() == null ? 0f								: item.getFdRestDay();						Float preUsedDay = item.getFdUsedDay();						preUsedDay = preUsedDay != null && preUsedDay > 0 ? preUsedDay : 0f;						//上周期已用额度大于前一年额度的剩余天数，并且上周期已用额度大于等于前一年额度的已用额度时，						//将上周期已用额度改为上周期已用额度-前一年额度的已用额度						usedDay = usedDay > fdRestDay && usedDay >= preUsedDay ? usedDay - preUsedDay : usedDay;						nextItem.setFdLastTotalDay(fdRestDay);						nextItem.setFdLastRestDay(fdRestDay - usedDay);						nextItem.setFdLastUsedDay(usedDay);						Date fdValidate = item.getFdValidDate();						Date now = new Date();						Boolean fdIsLastAvail = nextItem.getFdIsLastAvail();						if (fdValidate != null && now								.before(SysTimeUtil.getDate(fdValidate, 1))) {							fdIsLastAvail = true;						}						if (fdValidate != null && now								.after(SysTimeUtil.getDate(fdValidate, 1))) {							fdIsLastAvail = false;						}						nextItem.setFdLastValidDate(item.getFdValidDate());						nextItem.setFdIsLastAvail(fdIsLastAvail);						sysTimeLeaveAmountItemService.getBaseDao()								.update(nextItem);					}				}			}		}		super.update(amount);	}	@Override	public void delete(IBaseModel modelObj) throws Exception {		SysTimeLeaveAmount amount = (SysTimeLeaveAmount) modelObj;		// 更新下一年的数据		SysTimeLeaveAmount nextAmount = getLeaveAmount(amount.getFdYear() + 1,				amount.getFdPerson().getFdId());		if (nextAmount != null) {			List<SysTimeLeaveAmountItem> amountItems = amount					.getFdAmountItems();			List<SysTimeLeaveAmountItem> nextAmountItems = nextAmount					.getFdAmountItems();			if (!nextAmountItems.isEmpty() && !amountItems.isEmpty()) {				for (SysTimeLeaveAmountItem item : amountItems) {					SysTimeLeaveAmountItem nextItem = getLeaveAmountItem(							nextAmountItems, item.getFdLeaveType());					if (nextItem != null) {						nextItem.setFdLastTotalDay(null);						nextItem.setFdLastRestDay(null);						nextItem.setFdLastUsedDay(null);						nextItem.setFdLastValidDate(null);						nextItem.setFdIsLastAvail(false);						sysTimeLeaveAmountItemService.getBaseDao()								.update(nextItem);					}				}			}		}		super.delete(amount);	}	/**	 * 根据假期规则，更新额度信息	 * 	 * @param item	 * @param leaveRule	 * @throws Exception	 */	@Override	public void updateLeaveAmountItem(SysTimeLeaveAmountItem item,									  SysTimeLeaveAmount amount, SysTimeLeaveRule leaveRule, Map<String,String> peseionMap)			throws Exception {		this.updateLeaveAmountItem(item, amount, leaveRule, peseionMap,null);	}	/**	 * 根据假期规则，更新额度信息	 * 	 * @param item	 * @param leaveRule	 * @throws Exception	 */	private void updateLeaveAmountItem(SysTimeLeaveAmountItem item,			SysTimeLeaveAmount amount, SysTimeLeaveRule leaveRule,Map<String,String> peseionMap,Map<String, JSONObject> staffPersonMap)			throws Exception {		if (Boolean.TRUE.equals(leaveRule.getFdIsAmount())				&& Boolean.TRUE.equals(leaveRule.getFdIsAvailable())) {			Integer fdAmountType = leaveRule.getFdAmountType();// 发放方式			String personId = amount.getFdPerson().getFdId();			//更新时，更新名称			item.setFdLeaveName(leaveRule.getFdName());			boolean isFullYear = true; //是否创建标志			if (fdAmountType==1) {// 手动发放				item.setFdIsAuto(false);				item.setFdIsAccumulate(false);			} else {// 自动发放				if (fdAmountType==2) {					item.setFdIsAuto(true);					Float usedDay = item.getFdUsedDay() == null ? 0f							: item.getFdUsedDay(); //以使用天数					Float autoTotal = leaveRule.getFdAutoAmount() == null ? 0f							: leaveRule.getFdAutoAmount();//发放天数					item.setFdTotalDay(autoTotal);					item.setFdRestDay(autoTotal - usedDay);				}				String createTime=null;				if (fdAmountType==3||fdAmountType==4) {					// 上一年的数据					SysTimeLeaveAmountItem lastYearItem =null;					if (StringUtil.isNotNull(personId)) {						lastYearItem = getLeaveAmountItem(DateUtil.getNowYear() - 1, personId, leaveRule.getFdSerialNo());					}					item.setFdIsAuto(true);					Float fdTotalDay = item.getFdTotalDay() == null ? 0f : item.getFdTotalDay(); //获取总天数					Float fdUsedDay = item.getFdUsedDay() == null ? 0f : item.getFdUsedDay();   //以使用天数					createTime = getCreateTime(peseionMap, leaveRule, staffPersonMap,personId);//peseionMap.get(personId);					if (StringUtil.isNotNull(createTime)) {						String currentDate = null;						//3:1月1日执行，4:当日执行						if (fdAmountType == 3) {							currentDate = getToDay();						} else {							currentDate = sdf.format(new Date());							if(lastYearItem ==null){								//上一年没有的情况下，满一年则发放								isFullYear = getIsFullYear(createTime,currentDate,true);							}else{								isFullYear = getIsFullYear(createTime,currentDate,false);							}						}						if (!isFullYear) {							//上一年周期是否存在							if(lastYearItem !=null) {								logger.debug("规则发放类型等于四,有上一周期，并且未满年，额度设置为0.修改:fd_id:"+personId);								fdTotalDay = 0f;							}else {								logger.debug("规则发放类型等于四,无上一周期，并且未满年，不执行修改.修改:fd_id:"+personId);								return;							}						} else {							fdTotalDay = getTotalDay(leaveRule, createTime, currentDate);						}					}else {						logger.debug("updateLeaveAmountItem方法，用户fd_id:"+personId+"  组织架构人员获取创建日期为空,更新额度为0...");						fdTotalDay=0f;					}					item.setFdTotalDay(fdTotalDay);					item.setFdRestDay(fdTotalDay - fdUsedDay);				}				Integer calType = leaveRule						.getFdAmountCalType();				if (calType == null) {					throw new Exception("发放方式数据有误");				}				Integer year = amount.getFdYear();				Date fdValidDate = item.getFdValidDate();				if (calType == 1) {					// 到期清零					item.setFdIsAccumulate(false);					Date validDate = null;					if (fdAmountType==4) {						if(StringUtil.isNotNull(createTime)) {							fdValidDate = formatValidDate(createTime, year,false);						}						//是否增加一年						boolean isNewYear =	(fdValidDate !=null && fdValidDate.getTime() < new Date().getTime());						validDate = getValidate(fdValidDate,0,isNewYear);					} else {						validDate = getValidDate(year, 0);					}					//如果失效日期 > 计算得到的日期					if (fdValidDate != null && fdValidDate.getTime() > validDate.getTime()) {						item.setFdIsAvail(IsAfterToday(fdValidDate));					} else {						item.setFdValidDate(validDate);						item.setFdIsAvail(IsAfterToday(validDate));					}				} else if (calType == 2) {					// 到期不清零					item.setFdIsAccumulate(true);					item.setFdValidDate(null);					item.setFdIsAvail(true);				} else if (calType == 3) {					// 到期清零，延长有效期					item.setFdIsAccumulate(false);					Date validDate = null;					if (fdAmountType==4) {						if(StringUtil.isNotNull(createTime)) {							fdValidDate = formatValidDate(createTime, year,false);						}						//是否增加一年						boolean isNewYear =	(fdValidDate !=null && fdValidDate.getTime() < new Date().getTime());						validDate = getValidate(fdValidDate,leaveRule.getFdValidDays(),isNewYear);					}else{						validDate = getValidDate(year,leaveRule.getFdValidDays());					}					//如果失效日期 > 计算得到的日期					if (fdValidDate != null && fdValidDate.getTime() > validDate.getTime()) {						item.setFdIsAvail(IsAfterToday(fdValidDate));					} else {						item.setFdValidDate(validDate);						item.setFdIsAvail(IsAfterToday(validDate));					}				}			}		}	}	/**	 * 根据入职日期获取失效时间	 * @param createTime	 * @param year	 * @param isPlus	 * @return	 */	private Date formatValidDate(String createTime, Integer year,boolean isPlus) {		if(StringUtil.isNull(createTime) || year == null) {			return null;		}		Date createDate = DateUtil.convertStringToDate(createTime, "yyyy-MM-dd");		Calendar cal =Calendar.getInstance();		cal.setTime(createDate);		if(isPlus) {			year = year + 1;		}		cal.set(Calendar.YEAR, year);		cal.set(Calendar.HOUR_OF_DAY, 0);		cal.set(Calendar.MINUTE, 0);		cal.set(Calendar.SECOND, 0);		cal.set(Calendar.MILLISECOND, 0);		return cal.getTime();	}	/**	 * 根据假期规则，返回一个额度信息	 * @param amount	 * @param leaveRule	 * @param peseionMap	 * @return	 * @throws Exception	 */	@Override	public SysTimeLeaveAmountItem createLeaveAmountItem(			SysTimeLeaveAmount amount, SysTimeLeaveRule leaveRule,Map<String,String> peseionMap)			throws Exception {		return this.createLeaveAmountItem(amount, leaveRule, peseionMap,null);	}	/**	 * 根据假期规则，返回一个额度信息	 * @param amount	 * @param leaveRule	 * @param peseionMap	 * @param staffPersonMap	 * @return	 * @throws Exception	 */	private SysTimeLeaveAmountItem createLeaveAmountItem(			SysTimeLeaveAmount amount, SysTimeLeaveRule leaveRule,Map<String,String> peseionMap,Map<String, JSONObject> staffPersonMap)			throws Exception {		Integer year = amount.getFdYear();		Date today = SysTimeUtil.getDate(new Date(), 0);		String personId = amount.getFdPerson().getFdId();		SysTimeLeaveAmountItem item = new SysTimeLeaveAmountItem();		item.setFdId(IDGenerator.generateID());		item.setFdAmount(amount);		item.setFdLeaveName(leaveRule.getFdName());		item.setFdLeaveType(leaveRule.getFdSerialNo());		boolean isFullYear = true; //是否创建标志		if (Boolean.TRUE.equals(leaveRule.getFdIsAmount())				&& Boolean.TRUE.equals(leaveRule.getFdIsAvailable())) {			SysTimeLeaveAmountItem lastYearItem =null;			// 上一年的数据			if (StringUtil.isNotNull(personId)) {				lastYearItem = getLeaveAmountItem(year - 1, personId, leaveRule.getFdSerialNo());			}			Integer fdAmountType = leaveRule.getFdAmountType();// 发放方式			Integer fdAmountCalType = leaveRule.getFdAmountCalType();// 结算方式			if (fdAmountType == null) {				throw new UnexpectedRequestException();			}			if (fdAmountType == 2) {// 自动发放				item.setFdIsAuto(true);				item.setFdTotalDay(leaveRule.getFdAutoAmount());				item.setFdRestDay(leaveRule.getFdAutoAmount());				item.setFdUsedDay(0f);				if (fdAmountCalType == 1) {// 到期清零					item.setFdIsAccumulate(false);					Date validDate = getValidDate(year, 0);					item.setFdValidDate(validDate);					item.setFdIsAvail(IsAfterToday(validDate));				} else if (fdAmountCalType == 2) {// 不清零，累加					item.setFdIsAccumulate(true);					item.setFdValidDate(null);					item.setFdIsAvail(true);				} else if (fdAmountCalType == 3						&& leaveRule.getFdValidDays() != null) {// 到期清零，延长有效期					item.setFdIsAccumulate(false);					Date validDate = getValidDate(year,							leaveRule.getFdValidDays());					item.setFdValidDate(validDate);					item.setFdIsAvail(IsAfterToday(validDate));				}			} else if (fdAmountType == 1) {// 手动发放，（到期清零）				item.setFdIsAuto(false);				item.setFdIsAccumulate(false);				item.setFdTotalDay(0f);				item.setFdRestDay(0f);				item.setFdUsedDay(0f);				item.setFdValidDate(null);				item.setFdIsAvail(true);			}else if(fdAmountType == 3||fdAmountType == 4){ //规则发放				item.setFdIsAuto(true);//是否自动发放				item.setFdUsedDay(0f);//以使用天数				item.setFdTotalDay(0f);//总天数计算				item.setFdRestDay(0f);//剩余天数				String createTime = getCreateTime(peseionMap, leaveRule, staffPersonMap,personId);//peseionMap.get(personId);				if (StringUtil.isNull(createTime)) {					logger.debug("createLeaveAmountItem方法，用户fd_id:"+personId+"  组织架构人员获取创建日期为空忽略该人员操作...");				}else{					Date now =new Date();					String currentDate = null;					//3:1月1日执行，4:当日执行					if (fdAmountType == 3) {						currentDate = getToDay();					} else {						currentDate = sdf.format(now);						if(lastYearItem ==null){							//上一年没有的情况下，满一年则发放							isFullYear = getIsFullYear(createTime,currentDate,true);						}else{							isFullYear = getIsFullYear(createTime,currentDate,false);						}					}					if (isFullYear) {						Float totalDay = getTotalDay(leaveRule, createTime, currentDate);						item.setFdTotalDay(totalDay);//总天数计算						item.setFdRestDay(totalDay);//剩余天数						Date validDate = null;						Date fdValidDate = null;						if (fdAmountCalType == 1) {// 到期清零							item.setFdIsAccumulate(false);							if (fdAmountType==4) {								if(StringUtil.isNotNull(createTime)) {									fdValidDate = formatValidDate(createTime, year,false);								}								boolean isNewYear =	(fdValidDate !=null && fdValidDate.getTime() < now.getTime());								validDate = getValidate(fdValidDate, 0, isNewYear);							}else{								validDate = getValidDate(year, 0);							}							item.setFdValidDate(validDate);							item.setFdIsAvail(IsAfterToday(validDate));						} else if (fdAmountCalType == 2) {// 不清零，累加							item.setFdIsAccumulate(true);							item.setFdValidDate(null);							item.setFdIsAvail(true);						} else if (fdAmountCalType == 3								&& leaveRule.getFdValidDays() != null) {// 到期清零，延长有效期							item.setFdIsAccumulate(false);							if (fdAmountType==4) {								if(StringUtil.isNotNull(createTime)) {									fdValidDate = formatValidDate(createTime, year,false);								}								//如果有效期再执行任务之后。则不新增一年								boolean isNewYear =	(fdValidDate !=null && fdValidDate.getTime() < now.getTime());								validDate = getValidate(fdValidDate, leaveRule.getFdValidDays(), isNewYear);							}else{								validDate = getValidDate(year,leaveRule.getFdValidDays());							}							item.setFdValidDate(validDate);							item.setFdIsAvail(IsAfterToday(validDate));						}					}				}			}			if (lastYearItem != null) {				// 有上一年的数据				if (Boolean.TRUE.equals(lastYearItem.getFdIsAccumulate())						&& fdAmountCalType == 2) {// 是否累加					Float restDay = lastYearItem.getFdRestDay() == null							? 0 : lastYearItem.getFdRestDay();					Float lastRestDay = lastYearItem							.getFdLastRestDay() == null ? 0									: lastYearItem.getFdLastRestDay();					item.setFdLastTotalDay(restDay + lastRestDay);					item.setFdLastRestDay(restDay + lastRestDay);					item.setFdIsLastAvail(true);				} else if (lastYearItem.getFdValidDate() != null) {					Float restDay = lastYearItem.getFdRestDay() == null							? 0 : lastYearItem.getFdRestDay();					if (lastYearItem.getFdValidDate()							.compareTo(today) >= 0) {						// 未过期						item.setFdLastTotalDay(restDay);						item.setFdLastRestDay(restDay);						item.setFdIsLastAvail(true);					} else {						// 已过期						item.setFdLastTotalDay(restDay);						item.setFdLastRestDay(restDay);						item.setFdIsLastAvail(false);					}					item.setFdLastValidDate(lastYearItem.getFdValidDate());					item.setFdLastUsedDay(0f);				}			}			return item;		} else {			return null;		}	}	/**	 * 获取按规则发放天数	 * @param leaveRule	 * @param createTime	 * @param currentDate	 * @return	 * @throws Exception 	 */	@Override	public Float getTotalDay(SysTimeLeaveRule leaveRule,String createTime, String currentDate) throws Exception{		Integer fdAmountType = leaveRule.getFdAmountType();// 发放方式		int betweenDates = 0;		if (fdAmountType==4) {			betweenDates = getHoliday(createTime, currentDate);//司龄		}else{			betweenDates = longToYear(createTime,currentDate);//司龄		}		Boolean entryType = betweenDates >= 1 ? true : false;		float allDay=0.0f;				int longToYearCheck = longToYearCheck(createTime,currentDate);		if (longToYearCheck!=0) {			List<SysTimeLeaveRuleList> sysTimeLeaveRuleList = leaveRule.getSysTimeLeaveRuleList();			for (SysTimeLeaveRuleList ruleListValue : sysTimeLeaveRuleList) {				float holidayDays=0.0f;				String fdEntryType = ruleListValue.getFdEntryType(); //1：不满一年、2：一年以上				String fdQuotaType = ruleListValue.getFdQuotaType(); //1:固定额度、2：逐渐递增、3：公式计算				if ("1".equals(fdEntryType) && entryType == false) { //不满一年					if ("1".equals(fdQuotaType)) {						String fdHolidayDays = ruleListValue.getFdHolidayDays();						holidayDays= Float.parseFloat(fdHolidayDays);					}else if("3".equals(fdQuotaType)){						String getdayoOfYear = getdayoOfYear(longToYearCheck,ruleListValue.getFdCountDays());						holidayDays = Float.parseFloat(getdayoOfYear);					}				}				if ("2".equals(fdEntryType) && entryType == true) {//一年以上					int fdStartEntry = Integer.parseInt(ruleListValue.getFdStartEntry());					int fdEndEntry = Integer.parseInt(ruleListValue.getFdEndEntry());					if (betweenDates>=fdStartEntry&&betweenDates<=fdEndEntry) {						if ("1".equals(fdQuotaType)) {							String fdHolidayDays = ruleListValue.getFdHolidayDays();							holidayDays= Float.parseFloat(fdHolidayDays);						}else if("2".equals(fdQuotaType)){							float fdHolidayDays = Float.parseFloat(ruleListValue.getFdHolidayDays());							if (betweenDates==fdStartEntry) {								holidayDays= fdHolidayDays;							}else{								float day = (betweenDates-fdStartEntry);								float fdIncreaseDays = Float.parseFloat(ruleListValue.getFdIncreaseDays());								float increaseDay = (day*fdIncreaseDays);//递增天数								holidayDays=(fdHolidayDays+increaseDay);							}						}					}									}				allDay+=holidayDays;			}			}		return allDay;	}	/**	 * 获取fdAmountType为四的司龄	 * @param startTime	 * @param endTime	 * @return	 * @throws Exception	 */	private int getHoliday(String startTime, String endTime)throws Exception {		Calendar start = Calendar.getInstance();		Calendar end = Calendar.getInstance();		start.setTime(sdf.parse(startTime));		end.setTime(sdf.parse(endTime));		int startYear = start.get(Calendar.YEAR);		int endYear = end.get(Calendar.YEAR);		//开始年大于等于结束年。则直接返回0		if(startYear >= endYear) {			return 0;		}		Date startTimeNew = formatValidDate(startTime, DateUtil.getNowYear(), false);		boolean isFullYear = (startTimeNew != null && startTimeNew.getTime() <= end.getTimeInMillis());		//当前年月日 比 到单位日期的 大。则算是满了新的一年		if(isFullYear) {			return endYear-startYear;		}else {			//年份			return endYear-startYear -1;		}	}	/**	 * 计算两个时间的天数	 * @param startTime ： 开始时间	 * @param endTime  ： 结束时间	 * @return	 */	public static int caculateTotalTime(String startTime,String endTime) {		Date date1=null;		Date date = null;		Long l = 0L;		try {			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");			date = sdf.parse(startTime);			long ts = date.getTime();			date1 =  sdf.parse(endTime);			long ts1 = date1.getTime();			l = (ts - ts1) / (1000 * 60 * 60 * 24);		} catch (ParseException e) {			e.printStackTrace();		}		return l.intValue();	}	/**	 * 是否满整年	 * @param startTime 入职日期	 * @param endTime 执行时间	 * @param isCreate 首次使用系统	 * @return	 * @throws Exception	 */	private boolean getIsFullYear(String startTime, String endTime,boolean isCreate)throws Exception {		int dayNumber =caculateTotalTime(endTime,startTime);		//两个日期相隔一年以上，则认为是 满了一年		boolean isNewYear =false;		if(isCreate) {			//首次创建的时候，不过滤 入职月日是否大于当前月日			isNewYear = isCreate;		}else{			//入职日期加上今年的年份 小于 当前时间的则不发放			Date startTimeNew = formatValidDate(startTime, DateUtil.getNowYear(), false);			isNewYear = (startTimeNew != null && startTimeNew.getTime() < new Date().getTime());		}		//两个日期相隔一年以上，则认为是 满了一年		if(dayNumber >=365 && isNewYear){			return true;		}		return false;		/**		 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");		 Calendar start = Calendar.getInstance();	     Calendar end = Calendar.getInstance();	     start.setTime(sdf.parse(startTime));	     end.setTime(sdf.parse(endTime));	     int startYear = start.get(Calendar.YEAR);	     int startMonth = start.get(Calendar.MONTH);	     int startDate = start.get(Calendar.DATE);	     int endYear = end.get(Calendar.YEAR);	     int endMonth = end.get(Calendar.MONTH);	     int endDate = end.get(Calendar.DATE);	     //入职时间大于执行时间	     if (startYear > endYear) {	    	 logger.debug("入职时间大于执行时间...");			return false;		}	     //一年内不发放额度	     if (startYear == endYear) {	    	 logger.debug("一年内不发放额度...");			return false;		}	     //入职月份大于发放月份	     if (startMonth>endMonth) {	    	 logger.debug("入职月份大于发放月份...");			return false;		}	     //入职日期大于发放日期	     if (endMonth==startMonth) {	    	 if (startDate>endDate) {	    		 logger.debug("入职日期大于发放日期...");				return false;			}		}		return true;		*/	}		/**	 * 当前执行时间延长一年	 * date 日期	 * delta 延长多少天	 * isPlus 是否增加一年	 * @return	 */	public static Date getValidate(Date date,Integer delta,boolean isPlus){		if (date==null) {			date = new Date();		}		Calendar cal = Calendar.getInstance();		cal.setTime(date);//设置起时间		if (isPlus) {			cal.add(Calendar.YEAR, 1);//增加一年		}		cal.add(Calendar.DATE, delta);		return cal.getTime();	}	/**	 * 获取年月日	 * @return 年-月-日	 * @throws ParseException 	 */	private String getToDay() throws ParseException{		 Date today = SysTimeUtil.getDate(new Date(), 0);		 Calendar bef = Calendar.getInstance();		 bef.setTime(today);	     int year = bef.get(Calendar.YEAR);	     String dateTime=(year)+"-"+(1)+"-"+1;		return dateTime;	}		/**	 * 获取入职日期当天是今年的第几天	 * @param pastDay 距离今年结束还有多少天	 * @param holiday 公式计算天数	 * @return	 * @throws ParseException	 */	private String getdayoOfYear(int pastDay,String holiday) throws ParseException{		float parseInt = Float.parseFloat(holiday);		float pastDayInt = pastDay;		float chu = (pastDayInt/365)*parseInt;		float moFloat=(float) (chu%1);		double count =0.0;		double pointFive=0.5;		double pointTwoFive=0.25;		double floor = Math.floor(chu);		if (moFloat>pointFive) {			count=floor+pointFive;			double jian = moFloat-pointFive;			if (jian>pointTwoFive) {				count=count+pointFive;			}		}else{			count=floor;			if (moFloat>pointTwoFive) {				count=floor+0.5;			}		}		BigDecimal bigDecimal =new BigDecimal(count);		BigDecimal setScale = bigDecimal.setScale(1,BigDecimal.ROUND_HALF_UP);		return setScale.toString();	}			/**	 * 计算入职到今年的天数	 * @param beginDate 入职如期	 * @param endDate 执行时间	 * @return	 */	 public static int getTimeDistance(Date beginDate , Date endDate ) {         Calendar beginCalendar = Calendar.getInstance();         beginCalendar.setTime(beginDate);         Calendar endCalendar = Calendar.getInstance();         endCalendar.setTime(endDate);         long beginTime = beginCalendar.getTime().getTime();         long endTime = endCalendar.getTime().getTime();         int betweenDays = (int)((endTime - beginTime) / (1000 * 60 * 60 *24));//先算出两时间的毫秒数之差大于一天的天数                  endCalendar.add(Calendar.DAY_OF_MONTH, -betweenDays);//使endCalendar减去这些天数，将问题转换为两时间的毫秒数之差不足一天的情况         endCalendar.add(Calendar.DAY_OF_MONTH, -1);//再使endCalendar减去1天         if(beginCalendar.get(Calendar.DAY_OF_MONTH)==endCalendar.get(Calendar.DAY_OF_MONTH))//比较两日期的DAY_OF_MONTH是否相等		 {			 return betweenDays + 1;	//相等说明确实跨天了		 } else {			 return betweenDays + 0;	//不相等说明确实未跨天		 }     }	 	 /**	  * 计算司龄	  * @param createTime 入职如期	  * @param currentDate 执行时间	  * @return	  * @throws ParseException	  */	 public static int longToYear(String createTime,String currentDate) throws ParseException{		 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");		 int betweenDates = getTimeDistance(sdf.parse(createTime),sdf.parse(currentDate));//司龄		 int year=betweenDates/365;		 return year;	 }	 	 /**	  * 计算司龄是否为负数，如果为负数代表是今年的数据不进行计算	  * @param createTime 入职如期	  * @param currentDate 执行时间	  * @return	  * @throws ParseException	  */	 public static int longToYearCheck(String createTime,String currentDate) throws ParseException{		 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");	 	int betweenDates = getTimeDistance(sdf.parse(createTime),sdf.parse(currentDate));//司龄		 if (betweenDates<=0) {			 return 0;		}		 return betweenDates;	 }		/**	 * 获取所有有效人员	 * 	 * @return	 */	private List<String> getPersonIds() {		try {			HQLInfo hqlInfo = new HQLInfo();			hqlInfo.setSelectBlock("distinct sysTimeLeaveAmount.fdPerson.fdId");			return findValue(hqlInfo);		} catch (Exception e) {			e.printStackTrace();			logger.error(e.getMessage(), e);		}		return new ArrayList<String>();	}	@Override	public void updateOrAddAmomunt(String ruleId)			throws Exception {		Set<String> ruleIds=new HashSet<String>();		ruleIds.add(ruleId);		updateOrAddAmomunt(ruleIds,getPersonIds());	}		/**	 * 获取所有有效人员	 * 	 * @return	 */	@Override	public Map<String, String> getPerson() {		try {			IBaseDao baseDao = (IBaseDao) SpringBeanUtil.getBean("KmssBaseDao");			List<Object[]> list = baseDao.getHibernateSession().createNativeQuery(					"select e.fd_id , e.fd_create_time,p.fd_hiredate from sys_org_element e inner join sys_org_person p on e.fd_id=p.fd_id where e.fd_is_available=? and e.fd_is_business=? and e.fd_org_type=? and e.fd_is_external !=?")					.setParameter(0, Boolean.TRUE)					.setParameter(1, Boolean.TRUE)					.setParameter(2, SysOrgConstant.ORG_TYPE_PERSON)					.setParameter(3, Boolean.TRUE)					.list();			Map<String,String> persionMap=new HashMap<String,String>();			for (Object[] value : list) {				Object objectValue = value[1];				Object fdHiredate = value[2];				fdHiredate = fdHiredate != null						&& StringUtil.isNotNull(fdHiredate.toString())								? fdHiredate : objectValue;				if (fdHiredate != null && !"".equals(fdHiredate)) {					persionMap.put(value[0].toString(), fdHiredate.toString());				}else{					logger.debug("用户fd_id:"+value[0].toString()+"  组织架构人员获取创建日期为空忽略该人员操作...");				}			}			return persionMap;		} catch (Exception e) {			e.printStackTrace();			logger.error(e.getMessage(), e);		}		return new HashMap<String,String>();	}		private Map<String, JSONObject> getAllPersonInfo(List<String> idList) {		boolean exist = new File(PluginConfigLocationsUtil.getKmssConfigPath() + "/hr/staff").exists();		Map<String, JSONObject> map = new HashMap<String, JSONObject>();		if (exist) {			try {				String sql = "select fd_org_person_id,fd_time_of_enterprise,fd_work_time,fd_entry_time,fd_work_time_diff,fd_work_year_diff,fd_rehire_time,fd_status from hr_staff_person_info where  1=1 ";				if (idList != null && !idList.isEmpty()) {					sql += " and " + HQLUtil.buildLogicIN("fd_id", idList);				}				NativeQuery sqlQuery = getBaseDao().getHibernateSession().createSQLQuery(sql);				List<Object[]> dlist = sqlQuery.list();				Object[] o = null;				for (int i = 0; i < dlist.size(); i++) {					o = (Object[]) dlist.get(i);					if (o[0] == null) {						continue;					} else {						JSONObject obj = new JSONObject();						obj.put("fdTimeOfEnterprise", o[1] == null ? "" : o[1].toString());						obj.put("fdWorkTime", o[2] == null ? "" : o[2].toString());						obj.put("fdEntryTime", o[3] == null ? "" : o[3].toString());						obj.put("fdWorkTimeDiff", o[4] == null ? "" : o[4].toString());						obj.put("fdWorkingYearsDiff", o[5] == null ? "" : o[5].toString());						obj.put("fdRehireTime", o[6] == null ? "" : DateUtil.convertDateToString((Date)o[6],"yyyy-MM-dd"));						obj.put("fdStatus", o[7] == null ? "" : o[7].toString());						map.put(o[0].toString(), obj);					}				}			} catch (Exception e) {				logger.error("获取用户人事档案入职日期失败", e);			}		}		return map;	}	/**	 * 获取创建时间	 * @param personMap	 * @param leaveRule	 * @param staffPersonMap	 * @param personId	 * @return	 */	private String getCreateTime(Map<String, String> personMap, SysTimeLeaveRule leaveRule,			Map<String, JSONObject> staffPersonMap,String personId) {		if(StringUtil.isNotNull(personId) 				&& personMap !=null && !personMap.isEmpty() && personMap.containsKey(personId)) {			String createTime = personMap.get(personId);			if(staffPersonMap == null || staffPersonMap.isEmpty() || !staffPersonMap.containsKey(personId) || !"official".equals(staffPersonMap.get(personId).get("fdStatus"))) {				return createTime;			}			JSONObject json = staffPersonMap.get(personId);			String fdTimeOfEnterprise = json.getString("fdTimeOfEnterprise");			String fdWorkTime = json.getString("fdWorkTime");			String fdEntryTime = json.getString("fdEntryTime");//			String fdWorkTimeDiff = json.getString("fdWorkTimeDiff");//			String fdWorkingYearsDiff = json.getString("fdWorkingYearsDiff");			//不需要取连续工龄字段。通过时间来算			if(Integer.valueOf(2).equals(leaveRule.getFdAmountCalRule()) && StringUtil.isNotNull(fdWorkTime)) {				//连续工龄 = 参加工作日期 到现在				createTime =fdWorkTime;			}else if(StringUtil.isNotNull(fdTimeOfEnterprise)) {				//如果选项连续工龄 为空 则取到本企业日期				//到本企业日期				createTime = fdTimeOfEnterprise;			}else if(StringUtil.isNotNull(fdEntryTime)) {				//不是连续工龄，到本企业日期为空，用入职日期				//入职日期				createTime = fdEntryTime;			}//			if(Integer.valueOf(2).equals(leaveRule.getFdAmountCalRule())) {//				//参加工作日期//				if(StringUtil.isNotNull(fdWorkTime)) {//					//createTime = formatCreateTime(fdWorkTime, fdWorkTimeDiff);//				}else {//					createTime = fdEntryTime;//				}//			}else {//				//到本企业日期//				if(StringUtil.isNotNull(fdTimeOfEnterprise)) {//					createTime = fdTimeOfEnterprise;//				}else if(StringUtil.isNotNull(fdEntryTime)) {//					//入职日期//					createTime = fdEntryTime;//				}//				if(StringUtil.isNull(fdTimeOfEnterprise)) {//					fdWorkingYearsDiff = null;//				}//				createTime = formatCreateTime(createTime, fdWorkingYearsDiff);//			}			return createTime;		}		return null;	}	/**	 * 计算创建时间	 * @param createTime	 * @param timeDiff	 * @return	 */	private String formatCreateTime(String createTime, String timeDiff) {		if(StringUtil.isNotNull(createTime)) {			Date entryTime = DateUtil.convertStringToDate(createTime, DateUtil.PATTERN_DATE);			Calendar calendar= Calendar.getInstance();			calendar.setTime(entryTime);			Integer diff = StringUtil.isNotNull(timeDiff)?Integer.valueOf(timeDiff):0;			calendar.add(Calendar.MONTH, -diff);			createTime = DateUtil.convertDateToString(calendar.getTime(),DateUtil.PATTERN_DATE);		}		return createTime;	}		/**	 * 根据人员，年份，获取某个假期的额度信息	 * 	 * @param year	 * @param personId	 * @param leaveType	 * @return	 */	@Override	public SysTimeLeaveAmountItem getLeaveAmountItem(Integer year,													 String personId, String leaveType) {		SysTimeLeaveAmount amount = getLeaveAmount(year, personId);		if (amount != null) {			return getLeaveAmountItem(amount.getFdAmountItems(),					leaveType);		}		return null;	}	/**	 * 获取用户某个假期类型的额度信息	 * 	 * @param year	 *            年份	 * @param personId	 * @param leaveType	 *            请假类型(假期编号)	 * @return	 */	@Override	public SysTimeLeaveAmountItem getLeaveAmountItemByType(Integer year,														   String personId, String leaveType) {		SysTimeLeaveAmount amount = getLeaveAmount(year, personId);		if (amount != null) {			return getLeaveAmountItemByType(amount.getFdAmountItems(),					leaveType);		}		return null;	}	/**	 * 将人员假期额度转换成map。用于后面的获取	 * @param list	 * @return	 */	public Map<String,SysTimeLeaveAmount> convertLeaveAmountListToMap(List<SysTimeLeaveAmount> list) {		Map<String,SysTimeLeaveAmount> resultMap=new HashMap<>();		if(CollectionUtils.isNotEmpty(list)){			for(SysTimeLeaveAmount temp:list){				resultMap.put(temp.getFdPerson().getFdId(),temp);			}		}		return resultMap;	}	public List<SysTimeLeaveAmount> getLeaveAmountList(Integer year,			List<String> personIds) {		List<SysTimeLeaveAmount> amountList = new ArrayList<SysTimeLeaveAmount>();		try {			if (year != null && personIds != null && !personIds.isEmpty()) {				HQLInfo hqlInfo = new HQLInfo();				hqlInfo.setWhereBlock(						"sysTimeLeaveAmount.fdYear = :year and "								+ HQLUtil.buildLogicIN(										"sysTimeLeaveAmount.fdPerson.fdId",										personIds));				hqlInfo.setParameter("year", year);				List<SysTimeLeaveAmount> list = findList(hqlInfo);				if (!list.isEmpty()) {					return list;				}			}		} catch (Exception e) {			e.printStackTrace();			logger.error(e.getMessage(), e);		}		return amountList;	}	/**	 * 根据人员，年份，获取额度信息	 * 	 * @param year	 * @param fdPersonId	 * @return	 * @throws Exception	 */	@Override	public SysTimeLeaveAmount getLeaveAmount(Integer year, String fdPersonId) {		SysTimeLeaveAmount amount = null;		try {			if (year != null && StringUtil.isNotNull(fdPersonId)) {				//使用jdbc查询列表并且转成该对象				HQLInfo hqlInfo = new HQLInfo();				hqlInfo.setWhereBlock(						"sysTimeLeaveAmount.fdPerson.fdId = :fdPersonId and sysTimeLeaveAmount.fdYear = :year");				hqlInfo.setParameter("fdPersonId", fdPersonId);				hqlInfo.setParameter("year", year);				SysTimeLeaveAmount sysTimeLeaveAmount = (SysTimeLeaveAmount) findFirstOne(hqlInfo);				if (sysTimeLeaveAmount != null) {					return sysTimeLeaveAmount;				}			}		} catch (Exception e) {			e.printStackTrace();			logger.error(e.getMessage(), e);		}		return amount;	}		/**	 * 获取假期额度详情	 * @param fdAmountId	 * @return	 */	public List<SysTimeLeaveAmountItem> getLeaveAmountItem(String fdAmountId) {		List<SysTimeLeaveAmountItem> amountItem = null;		try {			if (StringUtil.isNotNull(fdAmountId)) {				HQLInfo hqlInfo = new HQLInfo();				hqlInfo.setWhereBlock(						"sysTimeLeaveAmountItem.fdAmount.fdId = :fdAmountId");				hqlInfo.setParameter("fdAmountId", fdAmountId);				List<SysTimeLeaveAmountItem> list = sysTimeLeaveAmountItemService.findList(hqlInfo);				if (!list.isEmpty()) {					return list;				}			}		} catch (Exception e) {			e.printStackTrace();			logger.error(e.getMessage(), e);		}		return amountItem;	}	/**	 * 获取开启了额度管理的假期规则	 * @return	 */	@Override	public List getAllLeaveRule() {		List leaveRuleList = new ArrayList();		try {			HQLInfo hqlInfo = new HQLInfo();			hqlInfo.setWhereBlock(					"sysTimeLeaveRule.fdIsAmount=:isAmount "							+ "and sysTimeLeaveRule.fdIsAvailable = :isAvailable");			hqlInfo.setParameter("isAmount", true);// 开启了额度管理			hqlInfo.setParameter("isAvailable", true);// 有效			String orderBy = " sysTimeLeaveRule.fdOrder asc, sysTimeLeaveRule.fdId desc";			hqlInfo.setOrderBy(orderBy);			return sysTimeLeaveRuleService.findList(hqlInfo);		} catch (Exception e) {			e.printStackTrace();		}		return leaveRuleList;	}	/**	 * 构建导入的模板	 * 	 * @return	 * @throws Exception	 */	@Override	public HSSFWorkbook buildTempletWorkBook() throws Exception {		// 第一步，创建一个workbook，对应一个Excel文件		HSSFWorkbook wb = new HSSFWorkbook();		// 第二步，在workbook中添加一个sheet,对应Excel文件中的sheet		HSSFSheet sheet = wb.createSheet(ResourceUtil				.getString("sys-time:sysTime.import.sheet1.title"));		sheet.setDefaultColumnWidth(25); // 设置宽度		// 第三步，在sheet中添加表头第0行,注意老版本poi对Excel的行数列数有限制short		HSSFRow row = sheet.createRow((int) 0);		row.setHeight((short) (20 * 20));		// 第四步，创建单元格		HSSFCell cell = null;		// 定义普通字体样式		HSSFFont font1 = wb.createFont();		font1.setBold(true); // 字体增粗		HSSFCellStyle style1 = wb.createCellStyle();		style1.setAlignment(org.apache.poi.ss.usermodel.HorizontalAlignment.CENTER); // 水平布局：居中		style1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER); // 垂直居中		style1.setFillPattern(org.apache.poi.ss.usermodel.FillPatternType.SOLID_FOREGROUND);		style1.setFillForegroundColor(org.apache.poi.ss.usermodel.IndexedColors.PALE_BLUE.index);		style1.setFont(font1);		// 定义必填字体样式		HSSFFont font2 = wb.createFont();		font2.setBold(true); // 字体增粗		font2.setColor(org.apache.poi.ss.usermodel.IndexedColors.RED.index); // 字体颜色		HSSFCellStyle style2 = wb.createCellStyle();		style2.setAlignment(org.apache.poi.ss.usermodel.HorizontalAlignment.CENTER); // 水平布局：居中		style2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER); // 垂直居中		style2.setFillPattern(org.apache.poi.ss.usermodel.FillPatternType.SOLID_FOREGROUND);		style2.setFillForegroundColor(org.apache.poi.ss.usermodel.IndexedColors.PALE_BLUE.index);		style2.setFont(font2);		/********** 设置头部内容 **********/		// 第一列为：登录账号		int colIndex = 0;		cell = row.createCell(colIndex++);		cell.setCellValue(ResourceUtil				.getString("sys-time:sysTimeLeaveAmount.loginName"));		cell.setCellStyle(style2);		// 第一列为：年份		cell = row.createCell(colIndex++);		cell.setCellValue(ResourceUtil				.getString("sys-time:sysTimeLeaveAmount.fdYear"));		cell.setCellStyle(style2);		// 假期和失效日期		List<SysTimeLeaveRule> leaveRuleList = getAllLeaveRule();		for (SysTimeLeaveRule leaveRule : leaveRuleList) {			if (Boolean.TRUE.equals(leaveRule.getFdIsAmount())					&& Integer.valueOf(1).equals(leaveRule.getFdAmountType())) {				cell = row.createCell(colIndex++);				cell.setCellStyle(style2);				cell.setCellValue(leaveRule.getFdName() + ResourceUtil						.getString("sys-time:sysTimeLeaveAmount.fdTotalDay"));				cell = row.createCell(colIndex++);				cell.setCellStyle(style2);				cell.setCellValue(leaveRule.getFdName() + ResourceUtil						.getString("sys-time:sysTimeLeaveAmount.fdValidDate"));			}		}		// 注意事项		List<String> itemNodes = new ArrayList<String>();		itemNodes.add(ResourceUtil				.getString("sys-time:sysTime.import.sheet2.item.node1"));		itemNodes.add(ResourceUtil				.getString("sys-time:sysTime.import.sheet2.item.node2"));		itemNodes.add(ResourceUtil				.getString("sys-time:sysTime.import.sheet2.item.node4"));		itemNodes.add(ResourceUtil				.getString("sys-time:sysTime.import.sheet2.item.node5"));		if (itemNodes != null && !itemNodes.isEmpty()) {			HSSFSheet sheet2 = wb.createSheet(ResourceUtil					.getString("sys-time:sysTime.import.sheet2.title"));			sheet2.setColumnWidth(0, 35 * 80); // 第一列宽度			sheet2.setColumnWidth(1, 35 * 500); // 第二列宽度			HSSFRow row2 = null;			HSSFCell cell2 = null;			row2 = sheet2.createRow((int) 0);			row2.setHeight((short) (20 * 20));			cell2 = row2.createCell(0);			cell2.setCellValue(ResourceUtil					.getString("sys-time:sysTime.import.sheet2.serial"));			cell2.setCellStyle(style1);			cell2 = row2.createCell(1);			cell2.setCellValue(ResourceUtil					.getString("sys-time:sysTime.import.sheet2.item"));			cell2.setCellStyle(style1);			// 单元格样式			HSSFCellStyle style2_1 = wb.createCellStyle();			style2_1.setAlignment(org.apache.poi.ss.usermodel.HorizontalAlignment.CENTER); // 水平居中			style2_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER); // 垂直居中			HSSFCellStyle style2_2 = wb.createCellStyle();			style2_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER); // 垂直居中			for (int i = 0; i < itemNodes.size(); i++) {				row2 = sheet2.createRow((int) (i + 1));				row2.setHeight((short) (20 * 20));				row.setHeight((short) (20 * 20));				cell2 = row2.createCell(0);				cell2.setCellValue(String.valueOf(i + 1));				cell2.setCellStyle(style2_1);				cell2 = row2.createCell(1);				cell2.setCellValue(itemNodes.get(i));				cell2.setCellStyle(style2_2);			}		}		return wb;	}	private List<SysTimeLeaveRule> getLeaveRule(Integer amountType)			throws Exception {		List<SysTimeLeaveRule> list = new ArrayList<SysTimeLeaveRule>();		HQLInfo hqlInfo = new HQLInfo();		hqlInfo.setWhereBlock(				"sysTimeLeaveRule.fdIsAmount=:isAmount "						+ "and sysTimeLeaveRule.fdIsAvailable = :isAvailable "						+ "and sysTimeLeaveRule.fdAmountType=:amountType");		hqlInfo.setParameter("isAmount", true);// 开启了额度管理		hqlInfo.setParameter("isAvailable", true);// 有效		hqlInfo.setParameter("amountType", amountType);		return sysTimeLeaveRuleService.findList(hqlInfo);	}	/**	 * 保存导入信息	 * 	 * @param importForm	 * @param isRollBack	 * @return	 * @throws Exception	 */	@Override	public KmssMessage saveImportData(SysTimeImportForm importForm,			boolean isRollBack) throws Exception {		Workbook wb = null;		Sheet sheet = null;		InputStream inputStream = null;		try {			inputStream = importForm.getFile().getInputStream();			// 抽象类创建Workbook，适合excel 2003和2007以上			wb = WorkbookFactory.create(inputStream);			sheet = wb.getSheetAt(0);			// 一份标准的模板，最少包含2行，第一行是字段名称，导入的数据应该是从第二行开始			int rowNum = sheet.getLastRowNum();			if (rowNum < 1) {				throw new RuntimeException(						ResourceUtil.getString("sys-time:sysTime.import.empty"));			}			Row titleRow = sheet.getRow(0);			int titleNum = titleRow.getLastCellNum();			// 手动发放			List<SysTimeLeaveRule> mannulLeaveRules = getLeaveRule(1);			// 检查文件是否是下载的模板文件			if (!(titleNum == mannulLeaveRules.size() * 2 + 2) && titleNum <= 2) {				throw new RuntimeException(						ResourceUtil.getString("sys-time:sysTime.import.errFile"));			}			List<String> leaveNameList = new ArrayList<String>();			for (int k = 2; k < titleNum; k += 2) {				String leaveName = SysTimeImportUtil						.getCellValue(titleRow.getCell(k));				int endIdx = leaveName.indexOf(ResourceUtil						.getString("sys-time:sysTimeLeaveAmount.fdTotalDay"));				if (endIdx > -1) {					leaveName = leaveName.substring(0, endIdx);					leaveNameList.add(leaveName);				}			}			if (leaveNameList.isEmpty()					&& mannulLeaveRules.size() != leaveNameList.size()) {				throw new RuntimeException(						ResourceUtil.getString("sys-time:sysTime.import.errFile"));			}			int count = 0;			KmssMessages messages = null;			StringBuffer errorMsg = new StringBuffer();			SysTimeLeaveAmount leaveAmount = null;			boolean isNew = true;			SysOrgPerson person = null;			Integer year = null;			for (int i = 1; i <= sheet.getLastRowNum(); i++) {				messages = new KmssMessages();				Row row = sheet.getRow(i);				if (row == null) { // 跳过空行					continue;				}				int colIndex = 0;				leaveAmount = new SysTimeLeaveAmount();				// 登录名				String loginName = SysTimeImportUtil						.getCellValue(row.getCell(colIndex++));				if (StringUtil.isNull(loginName)) {					messages.addError(new KmssMessage(ResourceUtil							.getString("sys-time:sysTime.import.error.loginName")));				} else {					person = sysOrgCoreService.findByLoginName(loginName);					if (person == null || person.getFdIsExternal()) {						messages.addError(new KmssMessage(ResourceUtil.getString(								"sys-time:sysTime.import.error.loginName.notExist")));					} else {						leaveAmount.setFdPerson(person);					}				}				// 年份				String __year = SysTimeImportUtil						.getCellValue(row.getCell(colIndex++));				if (StringUtil.isNotNull(__year)) {					try {						year = Integer.parseInt(__year);					} catch (Exception e) {						messages.addError(new KmssMessage(ResourceUtil.getString(								"sys-time:sysTime.import.error.year.format")));					}					if (person != null && year != null) {						SysTimeLeaveAmount tmpAmount = getLeaveAmount(year,								person.getFdId());						if (tmpAmount != null) {							leaveAmount = tmpAmount;							isNew = false;						} else {							leaveAmount.setFdYear(year);						}					}				} else {					messages.addError(new KmssMessage(ResourceUtil.getString(							"sys-time:sysTime.import.error.year.null")));				}				List<SysTimeLeaveAmountItem> leaveAmountItem = getLeaveAmountItem(leaveAmount.getFdId());				List<SysTimeLeaveAmountItem> items = new ArrayList<SysTimeLeaveAmountItem>();				List<String> typeList = new ArrayList<String>();				// 手动发放				for (int j = 0; j < leaveNameList.size(); j++) {					String leaveName = leaveNameList.get(j);					SysTimeLeaveRule leaveRule = getLeaveRule(mannulLeaveRules,							leaveName);					if (leaveRule == null) {						messages.addError(new KmssMessage(ResourceUtil.getString(								"sysTime.import.error.noLeaveRule", "sys-time",								null, leaveName)));						continue;					}					String totalDay = SysTimeImportUtil							.getCellValue(row.getCell((colIndex + j * 2)));					// 当前周期的数据					if (leaveAmount.getFdYear() != null							&& leaveAmount.getFdPerson() != null) {						SysTimeLeaveAmount curAmount = getLeaveAmount(								leaveAmount.getFdYear(),								leaveAmount.getFdPerson().getFdId());						if (curAmount != null) {							List<SysTimeLeaveAmountItem> curAmountItems = curAmount									.getFdAmountItems();							SysTimeLeaveAmountItem curItem = getLeaveAmountItem(									curAmountItems, leaveRule.getFdSerialNo());							if (curItem != null) {								Float fdTotalDay = curItem.getFdTotalDay() == null										? 0f : curItem.getFdTotalDay();								Float __totalDay = 0f;								if (StringUtil.isNotNull(totalDay)) {									__totalDay = Float.parseFloat(totalDay);								}								totalDay = __totalDay + fdTotalDay										+ "";							}						}					}					if (!validateTotalDay(totalDay, leaveAmount, leaveName,							messages)) {						continue;					}					String validDate = SysTimeImportUtil							.getCellValue(row.getCell((colIndex + j * 2 + 1)));					if (!validateDate(validDate, leaveAmount, leaveName,							messages)) {						continue;					}					SysTimeLeaveAmountItem item = new SysTimeLeaveAmountItem();					SysTimeLeaveAmountItem curItem = getLeaveAmountItem(							leaveAmountItem, leaveRule.getFdSerialNo());					if (curItem != null) {						item = curItem;					} else {						item.setFdId(IDGenerator.generateID());						item.setFdUsedDay(0f);					}					item.setFdLeaveName(leaveName);					item.setFdLeaveType(leaveRule.getFdSerialNo());					item.setFdAmount(leaveAmount);					item.setFdIsAuto(false);					item.setFdIsAccumulate(false);					item.setFdTotalDay(Float.parseFloat(totalDay));					Float fdUsedDay = item.getFdUsedDay() == null ? 0f : item.getFdUsedDay();					item.setFdRestDay(Float.parseFloat(totalDay) - fdUsedDay);					Date __validDate = DateUtil.convertStringToDate(validDate,							"yyyy-MM-dd", null);					item.setFdValidDate(__validDate);					item.setFdIsAvail(IsAfterToday(__validDate));					typeList.add(leaveRule.getFdSerialNo());					// 更新上周期的数据					if (leaveAmount.getFdYear() != null && leaveAmount.getFdPerson() != null) {						SysTimeLeaveAmount preAmount = getLeaveAmount(								leaveAmount.getFdYear() - 1,								leaveAmount.getFdPerson().getFdId());						if (preAmount != null) {							List<SysTimeLeaveAmountItem> preAmountItems = preAmount									.getFdAmountItems();							SysTimeLeaveAmountItem preItem = getLeaveAmountItem(									preAmountItems, item.getFdLeaveType());							if (preItem != null) {								if (curItem != null) {									item.setFdLastTotalDay(curItem.getFdLastTotalDay());									item.setFdLastRestDay(curItem.getFdLastRestDay());									item.setFdLastUsedDay(curItem.getFdLastUsedDay());									item.setFdLastValidDate(curItem.getFdLastValidDate());									item.setFdIsLastAvail(											Boolean.TRUE.equals(curItem.getFdIsLastAvail()));								} else {									Float fdRestDay = preItem.getFdRestDay() == null											? 0f : preItem.getFdRestDay();									item.setFdLastTotalDay(fdRestDay);									item.setFdLastRestDay(fdRestDay);									item.setFdLastUsedDay(0f);									item.setFdLastValidDate(preItem.getFdValidDate());									item.setFdIsLastAvail(											Boolean.TRUE.equals(preItem.getFdIsAvail()));								}							}						}					}					items.add(item);				}				// 自动发放				if (leaveAmountItem != null) {					for (int j = 0; j < leaveAmountItem.size(); j++) {						String fdLeaveType = leaveAmountItem.get(j)								.getFdLeaveType();						boolean contains = typeList.contains(fdLeaveType);						if (contains) {							continue;						}						items.add(leaveAmountItem.get(j));					}				}				// 如果有错误，就不进行导入				if (!messages.hasError()) {					if (leaveAmount.getFdAmountItems() != null) {						leaveAmount.getFdAmountItems().clear();						leaveAmount.getFdAmountItems().addAll(items);					} else {						leaveAmount.setFdAmountItems(items);					}					saveData(leaveAmount, isNew);					count++;				} else {					errorMsg.append(ResourceUtil.getString(							"sysTime.import.error.num", "sys-time", null, i + 1));					// 解析错误信息					for (KmssMessage message : messages.getMessages()) {						errorMsg.append(message.getMessageKey());					}					errorMsg.append("<br>");				}			}			KmssMessage message = null;			if (errorMsg.length() > 0) {				if (isRollBack) {					// 如果有一条数据校验失败，则需要数据回滚。					throw new RuntimeException(errorMsg.toString());				} else {					errorMsg.insert(0, ResourceUtil.getString(							"sysTime.import.portion.failed", "sys-time", null,							count)							+ "<br>");					message = new KmssMessage(errorMsg.toString());					message.setMessageType(KmssMessage.MESSAGE_ERROR);				}			} else {				message = new KmssMessage(ResourceUtil.getString(						"sysTime.import.success", "sys-time", null, count));				message.setMessageType(KmssMessage.MESSAGE_COMMON);			}			return message;		} catch (Exception e) {			throw new RuntimeException(					ResourceUtil.getString("sys-time:sysTime.import.error"));		} finally {			IOUtils.closeQuietly(wb);			IOUtils.closeQuietly(inputStream);		}	}	private boolean validateTotalDay(String totalDay,			SysTimeLeaveAmount leaveAmount, String leaveName,			KmssMessages messages) {		boolean result = true;		Float __totalDay = 0f;		if (StringUtil.isNotNull(totalDay)) {			try {				__totalDay = Float.parseFloat(totalDay);				if (__totalDay < 0 || __totalDay > 365) {					result = false;					messages.addError(new KmssMessage(ResourceUtil.getString(							"sysTime.import.error.totalday.range", "sys-time",							null,							leaveName)));				} else if (leaveAmount != null						&& leaveAmount.getFdAmountItems() != null) {					SysTimeLeaveAmountItem item = getLeaveAmountItem(							leaveAmount.getFdAmountItems(), leaveName);					if (item != null && item.getFdUsedDay() != null) {						if (__totalDay < item.getFdUsedDay()) {							result = false;							messages.addError(									new KmssMessage(ResourceUtil.getString(											"sysTime.import.error.larger.used",											"sys-time", null,											leaveName)));						}					}				}			} catch (Exception e) {				result = false;				messages.addError(new KmssMessage(ResourceUtil.getString(						"sysTime.import.error.totalday.cast", "sys-time", null,						leaveName)));			}		} else {			messages.addError(new KmssMessage(ResourceUtil.getString(					"sysTime.import.error.noTotalDay", "sys-time", null,					leaveName)));			result = false;		}		return result;	}	private boolean validateDate(String validDate,			SysTimeLeaveAmount leaveAmount, String leaveName,			KmssMessages messages) {		boolean result = true;		if(StringUtil.isNotNull(validDate)){			try {				Date __validDate = DateUtil.convertStringToDate(validDate,						"yyyy-MM-dd");				if (__validDate != null && leaveAmount.getFdYear() != null						&& !isDateRange(leaveAmount.getFdYear(), __validDate)) {					result = false;					messages.addError(new KmssMessage(ResourceUtil.getString(							"sysTime.import.error.dateRange", "sys-time", null,							leaveName)));				}			} catch (Exception e) {				result = false;				messages.addError(new KmssMessage(ResourceUtil.getString(						"sysTime.import.error.date.format", "sys-time", null,						leaveName)));			}		}else {			result = false;			messages.addError(new KmssMessage(ResourceUtil.getString(					"sysTime.import.error.date.null", "sys-time", null,					leaveName)));		}			return result;	}	/**	 * 是否今天或今天后	 * 	 * @param date	 * @return	 */	private Boolean IsAfterToday(Date date) {		Date today = SysTimeUtil.getDate(new Date(), 0);		return SysTimeUtil.getDate(date, 0).compareTo(today) >= 0;	}	/**	 * 获取有效日期	 * 	 * @param year	 *            年份	 * @param delta	 *            延长天数	 * @return	 */	private Date getValidDate(Integer year, Integer delta) {		if (year == null || delta == null) {			return null;		}		Calendar cal = Calendar.getInstance();		cal.clear();		cal.set(Calendar.YEAR, year);		cal.roll(Calendar.DAY_OF_YEAR, -1);		cal.add(Calendar.DATE, delta);		return cal.getTime();	}	private boolean isDateRange(Integer year, Date date) {		Calendar cal = Calendar.getInstance();		cal.setTime(SysTimeUtil.getDate(new Date(), 0));		cal.set(Calendar.YEAR, year);		cal.set(Calendar.DAY_OF_YEAR, 1);		Date thisYear = cal.getTime();		cal.add(Calendar.YEAR, 2);		Date nextYear = cal.getTime();		return thisYear.compareTo(date) <= 0 && nextYear.compareTo(date) > 0;	}	public SysTimeLeaveAmountItem getLeaveAmountItem(			List<SysTimeLeaveAmountItem> itemList, String leaveType) {		if (StringUtil.isNull(leaveType) || itemList == null) {			return null;		}		for (SysTimeLeaveAmountItem item : itemList) {			if (leaveType.equals(item.getFdLeaveType())) {				return item;			}		}		return null;	}	private SysTimeLeaveAmountItem getLeaveAmountItemByType(			List<SysTimeLeaveAmountItem> itemList, String leaveType) {		SysTimeLeaveRule rule = sysTimeLeaveRuleService				.getLeaveRuleByType(leaveType);		if (rule == null || itemList == null) {			return null;		}		for (SysTimeLeaveAmountItem item : itemList) {			if (rule.getFdSerialNo().equals(item.getFdLeaveType())) {				return item;			}		}		return null;	}	/**	 * 根据名称获取假期类型(注意使用场景,一般不建议使用名称获取对应类型)	 * 	 * @param leaveRuleList	 * @param leaveName	 * @return	 */	private SysTimeLeaveRule getLeaveRule(List<SysTimeLeaveRule> leaveRuleList,			String leaveName) {		for (SysTimeLeaveRule leaveRule : leaveRuleList) {			if (leaveName.equals(leaveRule.getFdName())) {				return leaveRule;			}		}		return null;	}	/**	 * 保存数据	 */	protected void saveData(SysTimeLeaveAmount leaveAmount, boolean isNew)			throws Exception {		if (isNew) {			add(leaveAmount);		} else {			update(leaveAmount);		}	}		@Override	public HSSFWorkbook buildWorkBook(RequestContext requestContext)			throws Exception {		HSSFWorkbook workbook = new HSSFWorkbook();		HQLInfo hqlInfo=new HQLInfo();		if (hqlInfo.getCheckParam(SysAuthConstant.CheckType.AllCheck) == null) {			hqlInfo.setCheckParam(SysAuthConstant.CheckType.AllCheck,					SysAuthConstant.AllCheck.DEFAULT);		}		hqlInfo.setRowSize(20000);// 防止数据过多，此处分页处理		hqlInfo.setPageNo(1);		hqlInfo.setOrderBy(" sysTimeLeaveAmount.docCreateTime desc");		Page page = this.findPage(hqlInfo);		HSSFSheet sheet = workbook.createSheet(				ResourceUtil.getString(						"sysTimeLeaveDetail.remainder.exportFileName", "sys-time"));		sheet.createFreezePane(0, 1);		List<SysTimeLeaveRule> leaveRuleList = this.getAllLeaveRule();		// 标题		int titleIdx = buildTitle(workbook, sheet,0,leaveRuleList);		// 内容		buildContent(workbook,sheet,				titleIdx + 1, page.getList(),leaveRuleList);		if (page.getTotal() > 1) {			for (int i = 2; i <= page.getTotal(); i++) {				hqlInfo.setPageNo(i);				Page p = this.findPage(hqlInfo);				HSSFSheet sheetAttend = workbook.createSheet(						ResourceUtil.getString(								"sysTimeLeaveDetail.remainder.exportFileName",								"sys-time") + "(" + (i - 1) + ")");				// 标题				int titleIndex = buildTitle(workbook,						sheetAttend,						0,leaveRuleList);				buildContent(						workbook,						sheetAttend,						titleIndex + 1, p.getList(),leaveRuleList);			}		}		return workbook;	}	@Override	public Map<String, Date> getSysTimeLeaveAmountCreateAndEndTime(int year, String personId) throws Exception {		Map<String, Date> resultMap = Maps.newHashMap();		resultMap.put("startTime",DateUtil.convertStringToDate(year+"-01-01 00:00:00","yyyy-MM-dd HH:mm:ss"));		resultMap.put("endTime",DateUtil.convertStringToDate(year+"-12-31 23:59:59","yyyy-MM-dd HH:mm:ss"));		List<Integer> yearList = Lists.newArrayList();		yearList.add(year);		//后面的一年，需要查询出两年的数据出来		yearList.add(year + 1);		HQLInfo hqlInfo = new HQLInfo();		hqlInfo.setWhereBlock("sysTimeLeaveAmount.fdPerson.fdId = :fdPersonId and sysTimeLeaveAmount.fdYear in(:year)");		// 根据年进行降序排列		hqlInfo.setOrderBy("sysTimeLeaveAmount.fdYear asc");		hqlInfo.setParameter("fdPersonId", personId);		hqlInfo.setParameter("year", yearList);		List<SysTimeLeaveAmount> sysTimeLeaveAmountList = findList(hqlInfo);		if(CollectionUtils.isEmpty(sysTimeLeaveAmountList)){			//如果不存在数据			return resultMap;		}		if(sysTimeLeaveAmountList.get(0).getDocCreateTime() != null){			resultMap.put("startTime",SysTimeUtil.getDate(sysTimeLeaveAmountList.get(0).getDocCreateTime(),0));		}		if(2 == sysTimeLeaveAmountList.size() && sysTimeLeaveAmountList.get(1).getDocCreateTime() != null){			//如果存在下一年度			resultMap.put("endTime",SysTimeUtil.getDate(sysTimeLeaveAmountList.get(1).getDocCreateTime(),0));		}		return resultMap;	}	@Override	public boolean isLastYear(int year, String personId) throws Exception {		HQLInfo hqlInfo = new HQLInfo();		hqlInfo.setWhereBlock("sysTimeLeaveAmount.fdPerson.fdId = :fdPersonId and sysTimeLeaveAmount.fdYear > :year");		hqlInfo.setParameter("fdPersonId", personId);		hqlInfo.setParameter("year", year);		List<SysTimeLeaveAmount> sysTimeLeaveAmountList = findList(hqlInfo);		//不存在数据则说明是最新一年的数据		if(CollectionUtils.isEmpty(sysTimeLeaveAmountList)){			return true;		}		return false;	}	@Override	public void deleteIds(String[] ids) throws Exception {		for(String id :ids){			SysTimeLeaveAmount sysTimeLeaveAmount = (SysTimeLeaveAmount)this.findByPrimaryKey(id, SysTimeLeaveAmount.class, true);			boolean lastYear = this.isLastYear(sysTimeLeaveAmount.getFdYear(), sysTimeLeaveAmount.getFdPerson().getFdId());			//不是老数据可以删除			if(lastYear){				this.delete(id);			}		}	}	private int buildTitle(HSSFWorkbook workbook, HSSFSheet sheet,			int rowStartIdx,List<SysTimeLeaveRule> leaveRuleList) throws Exception {		if (workbook == null || sheet == null) {			return -1;		}				int colNum = 4;		if(leaveRuleList!=null) {			colNum += leaveRuleList.size()+1;		}		/* 标题行 */		HSSFRow titlerow = sheet.createRow(rowStartIdx);		titlerow.setHeight((short) 400);		HSSFCellStyle titleCellStyle = workbook.createCellStyle();		HSSFFont font = workbook.createFont();		titleCellStyle.setAlignment(org.apache.poi.ss.usermodel.HorizontalAlignment.CENTER);		titleCellStyle.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);		font.setBold(true);		titleCellStyle.setFont(font);		HSSFCell[] titleCells = new HSSFCell[colNum];		for (int i = 0; i < titleCells.length; i++) {			titleCells[i] = titlerow.createCell(i);			titleCells[i].setCellStyle(titleCellStyle);		}		int titleIndex = 0;		titleCells[titleIndex++].setCellValue(ResourceUtil				.getString("sys-time:sysTimeLeaveAmount.fdDept"));		titleCells[titleIndex++].setCellValue(ResourceUtil				.getString("sys-time:sysTimeLeaveAmount.fdPersonName"));		titleCells[titleIndex++].setCellValue(ResourceUtil				.getString("sys-time:sysTimeLeaveAmount.loginName"));		titleCells[titleIndex++].setCellValue(ResourceUtil				.getString("sys-time:sysTimeLeaveAmount.fdYear"));				String restTitle=ResourceUtil.getString("sysTimeLeaveAmount.rest", "sys-time");		for(SysTimeLeaveRule leaveRule : leaveRuleList) {			titleCells[titleIndex++].setCellValue(restTitle+leaveRule.getFdName());		}		titleCells[titleIndex++].setCellValue(ResourceUtil				.getString("sys-time:sysTimeLeaveAmount.totalRestDay"));		return sheet.getLastRowNum();	}		private int buildContent(HSSFWorkbook workbook, HSSFSheet sheet,			int rowStartIdx, List list,List<SysTimeLeaveRule> leaveRuleList) throws Exception {		try {			if (workbook == null || sheet == null) {				return -1;			}			int colNum = 4;			if(leaveRuleList!=null) {				colNum += leaveRuleList.size()+1;			}			/* 内容行 */			HSSFCellStyle contentCellStyle = workbook.createCellStyle();			contentCellStyle.setAlignment(org.apache.poi.ss.usermodel.HorizontalAlignment.CENTER);			contentCellStyle.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);			contentCellStyle.setDataFormat(workbook.createDataFormat().getFormat("@"));			if (list != null && !list.isEmpty()) {				for (int i = 0; i < list.size(); i++) {					SysTimeLeaveAmount sysTimeLeaveAmount = (SysTimeLeaveAmount) list							.get(i);					if (sysTimeLeaveAmount == null) {						continue;					}					HSSFRow contentrow = sheet.createRow(rowStartIdx++);					contentrow.setHeight((short) 400);					HSSFCell[] contentcells = new HSSFCell[colNum];					for (int j = 0; j < contentcells.length; j++) {						contentcells[j] = contentrow.createCell(j);						contentcells[j].setCellStyle(contentCellStyle);						contentcells[j].setCellType(CellType.STRING);					}					int contentIndex = 0;					String fdNameString="";					String fdPersonDeptName = "";					String fdLoginName = "";					try {						fdNameString=sysTimeLeaveAmount.getFdPerson().getFdName();						fdPersonDeptName = sysTimeLeaveAmount.getFdPerson().getFdParentsName();						fdLoginName = sysTimeLeaveAmount.getFdPerson().getFdLoginName();					}catch(Exception e) {						logger.warn("获取假期额度的人员信息错误", e);					}					contentcells[contentIndex++].setCellValue(fdPersonDeptName);					contentcells[contentIndex++].setCellValue(fdNameString);					contentcells[contentIndex++].setCellValue(fdLoginName);					contentcells[contentIndex++].setCellValue(sysTimeLeaveAmount.getFdYear());					Float convertTime = SysTimeUtil.getConvertTime();					List<SysTimeLeaveAmountItem> fdAmountItems = sysTimeLeaveAmount.getFdAmountItems();					//剩余总天数					Float totalRest = 0f;					Float deltaHour = 0f;					for(SysTimeLeaveRule leaveRule : leaveRuleList) {						boolean isFind = false;						for(SysTimeLeaveAmountItem amountItem : fdAmountItems) {							BigInteger serialNo=new BigInteger(leaveRule.getFdSerialNo());							BigInteger leaveType= new BigInteger("0");							try {								if(StringUtil.isNotNull(amountItem.getFdLeaveType())) {									leaveType= new BigInteger(amountItem.getFdLeaveType());								}							}catch(Exception e) {								logger.warn("转换假期类型失败：" + amountItem.getFdId() + "_"+amountItem.getFdLeaveType(),e);							}							if(Objects.equals(serialNo, leaveType)){								Float restDay = amountItem.getFdRestDay() != null && Boolean.TRUE.equals(amountItem.getFdIsAvail())										? amountItem.getFdRestDay() : 0f;								Float lastRestDay = amountItem.getFdLastRestDay() != null && Boolean.TRUE.equals(amountItem.getFdIsLastAvail())										? amountItem.getFdLastRestDay() : 0f;								Float rest = restDay + lastRestDay;								if(Integer.valueOf(3).equals(leaveRule.getFdStatType())) {									Integer leaveDay = rest.intValue();									Float leaveHour =  (rest - rest.intValue()) * convertTime;									contentcells[contentIndex++].setCellValue(SysTimeUtil.formatLeaveTimeStr(leaveDay, leaveHour));									totalRest += leaveDay;									deltaHour += leaveHour;								} else {									totalRest += rest;									contentcells[contentIndex++].setCellValue(SysTimeUtil.formatFloat(rest));								}								isFind = true;								break;							}						}						if(!isFind){							contentcells[contentIndex++].setCellValue(0);						}					}					contentcells[contentIndex++].setCellValue(SysTimeUtil.formatLeaveTimeStr(totalRest, deltaHour));				}			}			return sheet.getLastRowNum();		} catch (Exception e) {			logger.error("buildAttendContent Error:" + e.getMessage(), e);			throw e;		}	}/*	*//**	 * 重置自动发放的假期额度	 * @throws Exception	 *//*	public void resetAmount() throws Exception {		HQLInfo hqlInfo=new HQLInfo();		hqlInfo.setWhereBlock("sysTimeLeaveRule.fdIsAvailable=:fdIsAvailable and sysTimeLeaveRule.fdAmountType=:fdAmountType");		hqlInfo.setParameter("fdIsAvailable",Boolean.TRUE);		hqlInfo.setParameter("fdAmountType",4);		List<SysTimeLeaveRule> list = sysTimeLeaveRuleService.findList(hqlInfo);		logger.debug("假期管理规则List："+list);		Map<String, String> personMap = this.getPerson();		if(personMap !=null && personMap.size() > 0) {			List<String> personIds = new ArrayList<>();			personIds.addAll(personMap.keySet());			for (SysTimeLeaveRule leaveRule : list) {				if (Boolean.TRUE.equals(leaveRule.getFdIsAvailable())						&& Boolean.TRUE.equals(leaveRule.getFdIsAmount())) {					//修改假期額度为0					long startTime = System.currentTimeMillis(); //获取开始时间					List<SysTimeLeaveAmount> amontList=new ArrayList<SysTimeLeaveAmount>();					TransactionStatus status = null;					status = TransactionUtils.beginTransaction();					List<SysTimeLeaveAmount> amountList = getLeaveAmountList(DateUtil.getNowYear(), personIds);					//人员和假期额度的对应，一个人只有一条					Map<String,SysTimeLeaveAmount> personAndAmountMap =convertLeaveAmountListToMap(amountList);					for (String personId : personIds) {						try {							SysTimeLeaveAmount amount = personAndAmountMap.get(personId);							if (amount != null) {								// 已存在额度数据								List<SysTimeLeaveAmountItem> tmpList = new ArrayList<SysTimeLeaveAmountItem>();								SysTimeLeaveAmountItem item = getLeaveAmountItem(tmpList, leaveRule.getFdSerialNo());								if (item != null) {									// 已存在该假期的额度信息									//修改假期额度为0									item.setFdTotalDay(0F);									item.setFdRestDay(0F);									item.setFdValidDate(null);									item.setFdIsAvail(true);									amontList.add(amount);								}							}						} catch (Exception e) {							e.printStackTrace();							logger.error("更新额度数据失败:" + e.getMessage(), e);						}					}					logger.debug("updateAmontList数量：" + amontList.size());					try {						for (int j = 0; j < amontList.size(); j++) {							update(amontList.get(j));						}						getBaseDao().getHibernateSession().flush();						getBaseDao().getHibernateSession().clear();						TransactionUtils.getTransactionManager().commit(status);					} catch (Exception e) {						e.printStackTrace();						TransactionUtils.getTransactionManager().rollback(status);					}					long endTime = System.currentTimeMillis(); //获取结束时间					//System.out.println("程序运行时间：" + (endTime - startTime) + "ms"); //输出程序运行时间					logger.debug("程序运行时间：" + (endTime - startTime) + "ms");					//重新调用假期额度更新					updateOrAddAmomunt(leaveRule.getFdId(),personIds, personMap);				}			}		}else{			logger.warn("假期额度发放人员为空");		}	}*/	/**	 * 同步假期额度	 * @param ruleIds 假期类型列表	 * @param personIds 人员列表	 * @throws Exception	 */	@Override	public void updateOrAddAmomunt(Set<String> ruleIds, List<String> personIds) throws Exception {		/**		 * 人员分组，200个人1组处理		 */		if (CollectionUtils.isNotEmpty(personIds) && CollectionUtils.isNotEmpty(ruleIds)) {			// 用户组分割			int maxCount = 200;			List<List> groupLists = new ArrayList<List>();			if (personIds.size() <= maxCount) {				logger.debug("小于=1000："+groupLists.size());				groupLists.add(personIds);			} else {				logger.debug("大于=1000："+groupLists.size());				groupLists = SysTimeUtil.splitList(personIds, maxCount);			}			int groupListsSize = groupLists.size();			logger.debug("所有有效人员数量："+personIds.size());			logger.debug("所有有效人员200人为一组："+groupListsSize);			for (int i = 0; i < groupListsSize; i++) {				List<String> personList = groupLists.get(i);				updateSysTimeLeaveAmountTask(personList,ruleIds);			}		}else {			logger.warn("额度发放执行失败，人员或假期类型为空！");		}	}	/**	 * 根据人员和假期规则处理假期额度	 * @param personList	 * @param ruleIds	 */	private void updateSysTimeLeaveAmountTask(List<String> personList, Set<String> ruleIds) {		// TODO Auto-generated method stub		getBaseDao().getHibernateSession().flush();		boolean isException =false;		TransactionStatus status = null;		//需要新增的假期类型额度列表		List<SysTimeLeaveAmountItem> saveItemList = new ArrayList<SysTimeLeaveAmountItem>();		//需要更新的假期类型额度列表		List<SysTimeLeaveAmountItem> updateItemList = new ArrayList<SysTimeLeaveAmountItem>();		//需要新增的年份额度记录		List<SysTimeLeaveAmount> amontListNew=new ArrayList<SysTimeLeaveAmount>();		//获取开始时间		long startTime = System.currentTimeMillis();		try {			status = TransactionUtils.beginNewReadTransaction();			Calendar cal = Calendar.getInstance();			//获取EKP组织架构内的人员创建日期			Map<String, String> personMap = this.getPerson(personList);			//获取人事档案的入职日期信息等			Map<String, JSONObject> staffPersonMap = getAllPersonInfo(personList);			Map<String,String> amountMap = getLeaveAmountIdsList( cal.get(Calendar.YEAR), personList);			Map<String,SysTimeLeaveRule> tempMap=new HashMap<>();			for (String personId : personList) {				try {					String amountId=amountMap.get(personId);					if (StringUtil.isNotNull( amountId)) {						//不使用懒加载模式						SysTimeLeaveAmount amount=(SysTimeLeaveAmount) findByPrimaryKey(amountId, SysTimeLeaveAmount.class.getName(), true);						//已存在额度数据						List<SysTimeLeaveAmountItem> itemList = amount.getFdAmountItems();						List<SysTimeLeaveAmountItem> tmpList = new ArrayList<SysTimeLeaveAmountItem>();						tmpList.addAll(itemList);						for (String ruleId : ruleIds) {							SysTimeLeaveRule leaveRule = tempMap.get(ruleId);							if(leaveRule ==null) {								leaveRule = (SysTimeLeaveRule) sysTimeLeaveRuleService.findByPrimaryKey(ruleId, null, true);								tempMap.put(ruleId,leaveRule);							}							if(leaveRule ==null){								continue;							}							SysTimeLeaveAmountItem item = getLeaveAmountItem(tmpList, leaveRule.getFdSerialNo());							if (item != null) {								// 已存在该假期的额度信息								updateLeaveAmountItem(item, item.getFdAmount(), leaveRule,personMap,staffPersonMap);								updateItemList.add(item);							} else {								// 没有该假期的额度信息								SysTimeLeaveAmountItem newItem = createLeaveAmountItem( amount, leaveRule,personMap,staffPersonMap);								if (newItem==null) {									continue;								}								saveItemList.add(newItem);							}						}					} else {						// 不存在额度数据						SysTimeLeaveAmount newAmount = new SysTimeLeaveAmount();						newAmount.setFdId(IDGenerator.generateID());						newAmount.setFdYear(cal.get(Calendar.YEAR));						newAmount.setFdPerson((SysOrgPerson) sysOrgCoreService.findByPrimaryKey(personId, SysOrgPerson.class));						newAmount.setDocCreator(UserUtil.getUser());						newAmount.setDocCreateTime(new Date());						for (String ruleId : ruleIds) {							SysTimeLeaveRule leaveRule = tempMap.get(ruleId);							if(leaveRule ==null) {								leaveRule = (SysTimeLeaveRule) sysTimeLeaveRuleService.findByPrimaryKey(ruleId, null, true);								tempMap.put(ruleId,leaveRule);							}							if(leaveRule ==null){								continue;							}							SysTimeLeaveAmountItem newItem = createLeaveAmountItem(newAmount, leaveRule,personMap,staffPersonMap);							if (newItem==null) {								continue;							}							saveItemList.add(newItem);						}						amontListNew.add(newAmount);					}				} catch (Exception e) {					e.printStackTrace();					logger.error("更新额度数据失败:" + e.getMessage(), e);				}			}		} catch (Exception e) {			e.printStackTrace();			isException =true;			logger.error("额度发放失败："+e.getMessage());		}finally {			if(isException && status !=null) {				TransactionUtils.rollback(status);			}else if(status !=null) {				TransactionUtils.commit(status);			}		}		logger.debug("addAmontList数量：" + amontListNew.size());		//单独事务进行处理		boolean isExceptionSave =false;		TransactionStatus saveStatus = null;		try {			saveStatus = TransactionUtils.beginNewTransaction();			//每1年的假期额度新增			for (int j = 0; j < amontListNew.size(); j++) {				//循环操作可考虑使用jdbc来进行批量操作				add(amontListNew.get(j));			}		} catch (Exception e) {			isExceptionSave =true;			logger.error("额度发放新增年份失败："+e.getMessage());		} finally {			if(isExceptionSave && saveStatus !=null) {				TransactionUtils.rollback(saveStatus);			}else if(saveStatus !=null) {				TransactionUtils.commit(saveStatus);			}			saveStatus =null;		}		if(!isExceptionSave) {			//新增假期类型额度明细			try {				saveStatus = TransactionUtils.beginNewTransaction();				if(CollectionUtils.isNotEmpty(saveItemList)) {					for (int si = 0; si < saveItemList.size(); si++) {						sysTimeLeaveAmountItemService.add(saveItemList.get(si));					}				}			} catch (Exception e) {				isExceptionSave =true;				logger.error("额度发放，新增明细失败："+e.getMessage());			}finally {				if(isExceptionSave && saveStatus !=null) {					TransactionUtils.rollback(saveStatus);				}else if(saveStatus !=null) {					TransactionUtils.commit(saveStatus);				}				saveStatus =null;			}		}		if(!isExceptionSave) {			//更新假期类型额度明细			try {				saveStatus = TransactionUtils.beginNewTransaction();				if(CollectionUtils.isNotEmpty(updateItemList)) {					for (int uj = 0; uj < updateItemList.size(); uj++) {						sysTimeLeaveAmountItemService.update(updateItemList.get(uj));					}				}			} catch (Exception e) {				isExceptionSave =true;				logger.error("额度更新失败："+e.getMessage());			}finally {				if(isExceptionSave && saveStatus !=null) {					TransactionUtils.rollback(saveStatus);				}else if(saveStatus !=null) {					TransactionUtils.commit(saveStatus);				}			}		}		long endTime = System.currentTimeMillis(); //获取结束时间		logger.debug("程序运行时间：" + (endTime - startTime) + "ms");	}	/**	 * 获取某年的假期额度	 * @param year	 * @param personIds	 * @return 根据人员id为key,年度额度fdId为value	 */	public Map<String,String> getLeaveAmountIdsList(Integer year,													List<String> personIds) {		Map<String,String> amountIdMap= new HashMap<String, String>();		try {			if (year != null && personIds != null && !personIds.isEmpty()) {				HQLInfo hqlInfo = new HQLInfo();				hqlInfo.setWhereBlock(						"sysTimeLeaveAmount.fdYear = :year and "								+ HQLUtil.buildLogicIN(								"sysTimeLeaveAmount.fdPerson.fdId",								personIds));				hqlInfo.setParameter("year", year);				hqlInfo.setSelectBlock("sysTimeLeaveAmount.fdId,sysTimeLeaveAmount.fdPerson.fdId");				List<Object[]> list = findValue(hqlInfo);				if(CollectionUtils.isNotEmpty(list)) {					for (Object[] objects : list) {						if(objects.length ==2) {							amountIdMap.put(objects[1].toString(),objects[0].toString());						}					}				}			}		} catch (Exception e) {			e.printStackTrace();			logger.error(e.getMessage(), e);		}		return amountIdMap;	}	/**	 * 获取人员的创建时间或入职时间	 * 指定人员查询	 * @return	 */	private Map<String,String> getPerson(List<String> personIds) {		boolean isException =false;		TransactionStatus status = null;		Map<String,String> persionMap=new HashMap<String,String>();		try {			status = TransactionUtils.beginNewReadTransaction();			String sql =" select e.fd_id , e.fd_create_time,p.fd_hiredate from sys_org_element e left join sys_org_person p on e.fd_id=p.fd_id where fd_is_available=? and fd_is_business=? and fd_org_type=? ";			if(CollectionUtils.isNotEmpty(personIds)) {				sql+= " and " + HQLUtil.buildLogicIN("e.fd_id", personIds);			}else {				return persionMap;			}			List<Object[]> list = getBaseDao().getHibernateSession().createSQLQuery(  sql)					.setParameter(0, Boolean.TRUE)					.setParameter(1, Boolean.TRUE).setParameter(2,							SysOrgConstant.ORG_TYPE_PERSON)					.list();			for (Object[] value : list) {				Object objectValue = value[1];				Object fdHiredate = value[2];				fdHiredate = fdHiredate != null && StringUtil.isNotNull(fdHiredate.toString()) ? fdHiredate : objectValue;				if (fdHiredate != null && !fdHiredate.equals("")) {					persionMap.put(value[0].toString(), fdHiredate.toString());				}else{					logger.debug("用户fd_id:"+value[0].toString()+"  组织架构人员获取创建日期为空忽略该人员操作...");				}			}			return persionMap;		} catch (Exception e) {			isException =true;			logger.error(e.getMessage(), e);		}finally {			if(isException && status !=null) {				TransactionUtils.rollback(status);			}else if(status !=null) {				TransactionUtils.commit(status);			}		}		return new HashMap<String,String>();	}	/**	 * (返聘)	 * 根据假期类型列表和人员列表更新返聘假期额度信息	 * @param leaveRule	 * @param personList	 * @throws Exception	 */	@Override	public void updateRehireAmomunt(SysTimeLeaveRule leaveRule, List<String> personList) {		try {			logger.warn("(ALL)开始新增或更新返聘人员假期额度信息,假期类型:{},人员列表:{}", leaveRule.getFdName(), personList);			Calendar cal = Calendar.getInstance();			//获取EKP组织架构内的人员创建日期			Map<String, String> personMap = this.getPerson(personList);			//获取人事档案的入职日期信息等			Map<String, JSONObject> staffPersonMap = getAllPersonInfo(personList);			Map<String, String> amountMap = getLeaveAmountIdsList(cal.get(Calendar.YEAR), personList);			for (String personId : personList) {				String amountId = amountMap.get(personId);				if (StringUtil.isNotNull(amountId)) {					SysTimeLeaveAmount amount = (SysTimeLeaveAmount) findByPrimaryKey(amountId, SysTimeLeaveAmount.class.getName(), true);					//已存在额度数据					List<SysTimeLeaveAmountItem> itemList = amount.getFdAmountItems();					SysTimeLeaveAmountItem item = getLeaveAmountItem(itemList, leaveRule.getFdSerialNo());					if (item != null) {						if (leaveRule.getFdAmountType() == 3) {							logger.warn("开始更新人员返聘假期额度明细信息:按规则发放(1月1日开始计算),人员id:{}", personId);							updateLeaveRehireAmountItem(item, item.getFdAmount(), leaveRule, personMap, staffPersonMap);						}						//获取入职日期()						String createTime = getCreateTime(personMap, leaveRule, staffPersonMap, personId);						if (leaveRule.getFdAmountType() == 4) {							String nowDate = DateUtil.convertDateToString(new Date(), "MM-dd");							String establishDate = createTime.substring(createTime.indexOf("-") + 1, createTime.indexOf(" "));							if (nowDate.equals(establishDate)) {								logger.warn("开始更新人员返聘假期额度明细信息:按规则发放(入职日期计算),人员id:{}", personId);								updateLeaveRehireAmountItem(item, item.getFdAmount(), leaveRule, personMap, staffPersonMap);							}						}					} else {						// 没有该假期明细的额度信息						logger.warn("开始新增人员返聘假期额度明细信息,人员id:{}", personId);						SysTimeLeaveAmountItem newItem = createRehireAmountItem(amount, leaveRule, personMap, staffPersonMap);						if (newItem == null) {							continue;						}						sysTimeLeaveAmountItemService.add(newItem);					}				} else {					logger.warn("开始新增人员返聘假期额度信息,人员id:{}", personId);					//需要新增的假期类型额度列表					List<SysTimeLeaveAmountItem> saveItemList = new ArrayList<SysTimeLeaveAmountItem>();					//需要新增的年份额度记录					List<SysTimeLeaveAmount> amontListNew = new ArrayList<SysTimeLeaveAmount>();					// 不存在额度数据					SysTimeLeaveAmount newAmount = new SysTimeLeaveAmount();					newAmount.setFdId(IDGenerator.generateID());					newAmount.setFdYear(cal.get(Calendar.YEAR));					newAmount.setFdPerson((SysOrgPerson) sysOrgCoreService.findByPrimaryKey(personId, SysOrgPerson.class));					newAmount.setDocCreator(UserUtil.getUser());					newAmount.setDocCreateTime(new Date());					if (leaveRule == null) {						continue;					}					SysTimeLeaveAmountItem newItem = createRehireAmountItem(newAmount, leaveRule, personMap, staffPersonMap);					if (newItem == null) {						continue;					}					saveItemList.add(newItem);					newAmount.setFdAmountItems(saveItemList);					this.add(newAmount);				}			}			logger.warn("(ALL)结束新增或更新返聘人员假期额度信息");		} catch (Exception e) {			logger.error("更新额度数据失败:" + e.getMessage(), e);			e.printStackTrace();		}	}	/**	 * （返聘）	 * 根据假期规则，更新额度信息	 * @param item	 * @param leaveRule	 * @throws Exception	 */	private void updateLeaveRehireAmountItem(SysTimeLeaveAmountItem item, SysTimeLeaveAmount amount, SysTimeLeaveRule leaveRule,Map<String,String> peseionMap,Map<String, JSONObject> staffPersonMap)			throws Exception {		if (amount.getFdPerson()==null) {			throw new Exception("没有获取到人员id");		}		try {			String personId = amount.getFdPerson().getFdId();			Float fdUsedDay = item.getFdUsedDay() == null ? 0f : item.getFdUsedDay();   //以使用天数			JSONObject json = staffPersonMap.get(personId);			String createTime = json.getString("fdEntryTime");			String currentDate = json.containsKey("fdRehireTime")? json.getString("fdRehireTime"):"";			Integer fdAmountType = leaveRule.getFdAmountType();			if(StringUtil.isNull(currentDate)){				if (fdAmountType == 3) {					currentDate = getToDay();				} else {					currentDate = sdf.format(new Date());				}			}			//获取返聘人员年假额度			Float fdTotalDay = getLeaveQuota(leaveRule,createTime,currentDate);			item.setFdTotalDay(fdTotalDay);			item.setFdRestDay(fdTotalDay - fdUsedDay);			logger.warn("人员id:{},入职时间:{},年假额度:{}",personId,createTime,fdTotalDay);			sysTimeLeaveAmountItemService.update(item);		} catch (Exception e) {			logger.error("更新人员信息出错:" + e.getMessage(), e);			e.printStackTrace();		}	}	/**	 * 获取人员年假额度（返聘）	 * @param createTime	 * @param currentDate	 * @param leaveRule	 * @throws Exception	 */	public Float getLeaveQuota(SysTimeLeaveRule leaveRule,String createTime,String currentDate) throws Exception {		Float fdTotalDay = 0f;		int betweenDates = 0;		if (leaveRule.getFdAmountType() == 3) {			//按规则发放(1月1日开始计算)			betweenDates = longToYear(createTime, currentDate);//司龄		} else if (leaveRule.getFdAmountType() == 4) {			//按规则发放(入职日期计算)			betweenDates = getHoliday(createTime, currentDate);//司龄		}		if (betweenDates >= 5 && betweenDates < 10) {			fdTotalDay = 5f;		} else if (betweenDates >= 10) {			fdTotalDay = 10f;		}		return fdTotalDay;	}	/**	 * 根据人事档案计算当年应休年假	 * @param hrStaffPersonInfo	 * @throws Exception	 */	@Override	public Double getRemainingAmount(HrStaffPersonInfo hrStaffPersonInfo,String fdLeaveTime) {		Double remainingAmount = 0d;		SysTimeLeaveRule leaveRule = sysTimeLeaveRuleService.getLeaveRuleByType("1");		if (leaveRule == null) {			logger.warn("获取当年应休年假时(没有获取到休假规则)!");			return remainingAmount;		}		try {			logger.warn("开始获取当年应休年假");			String personId = hrStaffPersonInfo.getFdId();			//获取员工状态			String fdStatus = hrStaffPersonInfo.getFdStatus();			List<String> personList = new ArrayList<>();			personList.add(personId);			Map<String, String> personMap = this.getPerson(personList);			Map<String, JSONObject> staffPersonMap = getAllPersonInfo(personList);			String createTime = getCreateTime(personMap, leaveRule, staffPersonMap, personId);//peseionMap.get(personId);			String startDate = getToDay();			//离职日期			String nowDate = fdLeaveTime;			//员工当年工作时长			int betweenDays = 0;			//员工入职日期到明年的年假额度			Float fdTotalDay = 0f;			if (leaveRule.getFdAmountType() == 3) {				//获取人员当年工作时长				betweenDays = getTimeDistance(sdf.parse(startDate), sdf.parse(nowDate));				//获取人员入职日期到明年的年假额度				String currentDate = getNextYear() + "-01-01";				fdTotalDay = getTypeFdTotalDay(fdStatus, leaveRule, createTime, currentDate);			} else if (leaveRule.getFdAmountType() == 4) {				//是否发放今年年假标识；true：是、false：否				Boolean isWhether = false;				startDate = DateUtil.convertDateToString(new Date(), "yyyy") + createTime.substring(createTime.indexOf("-"), createTime.indexOf(" "));				betweenDays = getTimeDistance(sdf.parse(startDate), sdf.parse(nowDate));				if (betweenDays < 0) {					isWhether = true;					betweenDays += 365;				}				if (isWhether) {					//按规则发放(入职日期计算)获取今年年假					String currentDate = DateUtil.convertDateToString(new Date(), "yyyy") + createTime.substring(createTime.indexOf("-"), createTime.indexOf(" "));					fdTotalDay = getTypeFdTotalDay(fdStatus, leaveRule, createTime, currentDate);				} else {					//按规则发放(入职日期计算)获取明年年假					String currentDate = getNextYear() + createTime.substring(createTime.indexOf("-"), createTime.indexOf(" "));					fdTotalDay = getTypeFdTotalDay(fdStatus, leaveRule, createTime, currentDate);				}			}			remainingAmount = Math.floor((betweenDays * fdTotalDay / 365) * 2) / 2.0;			logger.warn("结束获取当年应休年假;当年应休年假:{}", remainingAmount);		} catch (Exception e) {			logger.error("获取当年应休年假信息出错:" + e.getMessage(), e);			e.printStackTrace();		}		return remainingAmount;	}	/**	 * 根据人员类型获取，规则，开始时间，结束时间获取年假天数	 * @param fdStatus	 * @param leaveRule	 * @param createTime	 * @param currentDate	 * @return	 * @throws Exception	 */	public Float getTypeFdTotalDay(String fdStatus,SysTimeLeaveRule leaveRule,String createTime,String currentDate) throws Exception{		Float fdTotalDay = 0f;		if ("rehireAfterRetirement".equals(fdStatus)) {			fdTotalDay = getLeaveQuota(leaveRule,createTime,currentDate);		} else {			fdTotalDay = getTotalDay(leaveRule, createTime, currentDate);		}		return fdTotalDay;	}	/**	 * 获取明年年份	 * @return	 */	public String getNextYear(){		Calendar calendar = Calendar.getInstance();		Integer nextYear = calendar.get(Calendar.YEAR) + 1;		return nextYear.toString();	}	/**	 * （返聘）	 * 根据假期规则，返回一个额度信息	 * @param amount	 * @param leaveRule	 * @param peseionMap	 * @param staffPersonMap	 * @return	 * @throws Exception	 */	private SysTimeLeaveAmountItem createRehireAmountItem(			SysTimeLeaveAmount amount, SysTimeLeaveRule leaveRule,Map<String,String> peseionMap,Map<String, JSONObject> staffPersonMap)			throws Exception {		Integer year = amount.getFdYear();		Date today = SysTimeUtil.getDate(new Date(), 0);		String personId = amount.getFdPerson().getFdId();		SysTimeLeaveAmountItem item = new SysTimeLeaveAmountItem();		item.setFdId(IDGenerator.generateID());		item.setFdAmount(amount);		item.setFdLeaveName(leaveRule.getFdName());		item.setFdLeaveType(leaveRule.getFdSerialNo());		boolean isFullYear = true; //是否创建标志		if (Boolean.TRUE.equals(leaveRule.getFdIsAmount())				&& Boolean.TRUE.equals(leaveRule.getFdIsAvailable())) {			SysTimeLeaveAmountItem lastYearItem = null;			// 上一年的数据			if (StringUtil.isNotNull(personId)) {				lastYearItem = getLeaveAmountItem(year - 1, personId, leaveRule.getFdSerialNo());			}			Integer fdAmountType = leaveRule.getFdAmountType();// 发放方式			Integer fdAmountCalType = leaveRule.getFdAmountCalType();// 结算方式			if (fdAmountType == null) {				throw new UnexpectedRequestException();			}			if (fdAmountType == 3 || fdAmountType == 4) { //规则发放				item.setFdIsAuto(true);//是否自动发放				item.setFdUsedDay(0f);//以使用天数				item.setFdTotalDay(0f);//总天数计算				item.setFdRestDay(0f);//剩余天数				//返聘人员直接获取入职时间				String createTime = peseionMap.get(personId);				JSONObject json = staffPersonMap.get(personId);				if(json.containsKey("fdEntryTime")){					 createTime = json.getString("fdEntryTime");				}				//String createTime = getCreateTime(peseionMap, leaveRule, staffPersonMap, personId);//peseionMap.get(personId);				//按规则发放(入职日期计算),只有当前日期等于入职日期才进行发放				if (StringUtil.isNull(createTime)) {					logger.debug("createLeaveAmountItem方法，用户fd_id:" + personId + "  组织架构人员获取创建日期为空忽略该人员操作...");				} else {					Date now = new Date();					//当前时间 = 退休时间，如果退休时间为空，则按照年假设定规则发放					String currentDate = json.containsKey("fdRehireTime")? json.getString("fdRehireTime"):"";					//3:1月1日执行，4:当日执行					if(StringUtil.isNull(currentDate)){						if (fdAmountType == 3) {							currentDate = getToDay();						} else {							currentDate = sdf.format(now);							if (lastYearItem == null) {								//上一年没有的情况下，满一年则发放								isFullYear = getIsFullYear(createTime, currentDate, true);							} else {								isFullYear = getIsFullYear(createTime, currentDate, false);							}						}					}					if (isFullYear) {						Float totalDay = getLeaveQuota(leaveRule, createTime, currentDate);						item.setFdTotalDay(totalDay);//总天数计算						item.setFdRestDay(totalDay);//剩余天数						Date validDate;						Date fdValidDate = null;						if (fdAmountCalType == 1) {// 到期清零							item.setFdIsAccumulate(false);							if (fdAmountType == 4) {								if (StringUtil.isNotNull(createTime)) {									fdValidDate = formatValidDate(createTime, year, false);								}								boolean isNewYear = (fdValidDate != null && fdValidDate.getTime() < now.getTime());								validDate = getValidate(fdValidDate, 0, isNewYear);							} else {								validDate = getValidDate(year, 0);							}							//如果失效日期 > 计算得到的日期							if (fdValidDate != null && fdValidDate.getTime() > validDate.getTime()) {								item.setFdIsAvail(IsAfterToday(fdValidDate));							} else {								item.setFdValidDate(validDate);								item.setFdIsAvail(IsAfterToday(validDate));							}						} else if (fdAmountCalType == 2) {// 不清零，累加							item.setFdIsAccumulate(true);							item.setFdValidDate(null);							item.setFdIsAvail(true);						} else if (fdAmountCalType == 3								&& leaveRule.getFdValidDays() != null) {// 到期清零，延长有效期							item.setFdIsAccumulate(false);							if (fdAmountType == 4) {								if (StringUtil.isNotNull(createTime)) {									fdValidDate = formatValidDate(createTime, year, false);								}								//如果有效期再执行任务之后。则不新增一年								boolean isNewYear = (fdValidDate != null && fdValidDate.getTime() < now.getTime());								validDate = getValidate(fdValidDate, leaveRule.getFdValidDays(), isNewYear);							} else {								validDate = getValidDate(year, leaveRule.getFdValidDays());							}							item.setFdValidDate(validDate);							item.setFdIsAvail(IsAfterToday(validDate));						}					}				}			}			if (lastYearItem != null) {				// 有上一年的数据				if (Boolean.TRUE.equals(lastYearItem.getFdIsAccumulate())						&& fdAmountCalType == 2) {// 是否累加					Float restDay = lastYearItem.getFdRestDay() == null							? 0 : lastYearItem.getFdRestDay();					Float lastRestDay = lastYearItem							.getFdLastRestDay() == null ? 0							: lastYearItem.getFdLastRestDay();					item.setFdLastTotalDay(restDay + lastRestDay);					item.setFdLastRestDay(restDay + lastRestDay);					item.setFdIsLastAvail(true);				} else if (lastYearItem.getFdValidDate() != null) {					Float restDay = lastYearItem.getFdRestDay() == null							? 0 : lastYearItem.getFdRestDay();					if (lastYearItem.getFdValidDate()							.compareTo(today) >= 0) {						// 未过期						item.setFdLastTotalDay(restDay);						item.setFdLastRestDay(restDay);						item.setFdIsLastAvail(true);					} else {						// 已过期						item.setFdLastTotalDay(restDay);						item.setFdLastRestDay(restDay);						item.setFdIsLastAvail(false);					}					item.setFdLastValidDate(lastYearItem.getFdValidDate());					item.setFdLastUsedDay(0f);				}			}			return item;		} else {			return null;		}	}}